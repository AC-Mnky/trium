
main_prog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a88  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08003c6c  08003c6c  00004c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ca8  08003ca8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ca8  08003ca8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ca8  08003ca8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ca8  08003ca8  00004ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cac  08003cac  00004cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003cb0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000000c  08003cbc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08003cbc  000052c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfde  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002200  00000000  00000000  00012013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00014218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c2  00000000  00000000  00014ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a096  00000000  00000000  0001586a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103b8  00000000  00000000  0002f900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ff9  00000000  00000000  0003fcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7cb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a8  00000000  00000000  000d7cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000daf9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003c54 	.word	0x08003c54

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003c54 	.word	0x08003c54

08000224 <PID_init>:
// const int32_t Encoder_Read_freq = 500; //s^-1
const int32_t upper_integral = 20;
const int32_t real_tick_freq = 72000000;
const int32_t real_tick_freq_div256 = real_tick_freq >> 8;

void PID_init(struct PID_struct *pid, int32_t Kp_mul_n, int32_t Kp_frac_n , int32_t Ki_mul_n, int32_t Ki_frac_n, int32_t Kd_mul_n, int32_t Kd_frac_n) {
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
 8000230:	603b      	str	r3, [r7, #0]
	pid->target_val = 0; // << 8
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
	pid->actual_val = 0; // << 8
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2200      	movs	r2, #0
 800023c:	605a      	str	r2, [r3, #4]
	pid->output_val = 0; // << 8
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2200      	movs	r2, #0
 8000242:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->Error = 0; // << 8
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
	pid->LastError = 0; // << 8
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]

	pid->Kp_mul = Kp_mul_n;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	68ba      	ldr	r2, [r7, #8]
 8000254:	611a      	str	r2, [r3, #16]
	pid->Kp_frac = Kp_frac_n;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	61da      	str	r2, [r3, #28]

	pid->Ki_mul = Ki_mul_n;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	615a      	str	r2, [r3, #20]
	pid->Ki_frac = Ki_frac_n;
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	69ba      	ldr	r2, [r7, #24]
 8000266:	621a      	str	r2, [r3, #32]

	pid->Kd_mul = Kd_mul_n;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	69fa      	ldr	r2, [r7, #28]
 800026c:	619a      	str	r2, [r3, #24]
	pid->Kd_frac = Kp_frac_n;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000274:	bf00      	nop
 8000276:	3714      	adds	r7, #20
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr

0800027e <PID_change_para>:

void PID_change_para(struct PID_struct *pid, int32_t Kp_mul_n, int32_t Kp_frac_n , int32_t Ki_mul_n, int32_t Ki_frac_n, int32_t Kd_mul_n, int32_t Kd_frac_n){
 800027e:	b480      	push	{r7}
 8000280:	b085      	sub	sp, #20
 8000282:	af00      	add	r7, sp, #0
 8000284:	60f8      	str	r0, [r7, #12]
 8000286:	60b9      	str	r1, [r7, #8]
 8000288:	607a      	str	r2, [r7, #4]
 800028a:	603b      	str	r3, [r7, #0]
	pid->Kp_mul = Kp_mul_n;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	611a      	str	r2, [r3, #16]
	pid->Kp_frac = Kp_frac_n;
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	687a      	ldr	r2, [r7, #4]
 8000296:	61da      	str	r2, [r3, #28]

	pid->Ki_mul = Ki_mul_n;
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	683a      	ldr	r2, [r7, #0]
 800029c:	615a      	str	r2, [r3, #20]
	pid->Ki_frac = Ki_frac_n;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	69ba      	ldr	r2, [r7, #24]
 80002a2:	621a      	str	r2, [r3, #32]

	pid->Kd_mul = Kd_mul_n;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	69fa      	ldr	r2, [r7, #28]
 80002a8:	619a      	str	r2, [r3, #24]
	pid->Kd_frac = Kp_frac_n;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
	...

080002bc <PID_vel>:

int32_t PID_vel(struct PID_struct *pid, uint8_t PWM_Pulse,
		uint16_t Encoder_pulse, int32_t real_tick_elapsed) {
 80002bc:	b480      	push	{r7}
 80002be:	b087      	sub	sp, #28
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	460b      	mov	r3, r1
 80002c8:	72fb      	strb	r3, [r7, #11]
 80002ca:	4613      	mov	r3, r2
 80002cc:	813b      	strh	r3, [r7, #8]
	int32_t real_tick_elapsed_div256 = real_tick_elapsed >> 8;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	121b      	asrs	r3, r3, #8
 80002d2:	617b      	str	r3, [r7, #20]

	pid->target_val = ((int8_t) (PWM_Pulse)) << 8;
 80002d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80002d8:	021a      	lsls	r2, r3, #8
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	601a      	str	r2, [r3, #0]

	int32_t Encoder_pulse_short = (short)Encoder_pulse;
 80002de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80002e2:	613b      	str	r3, [r7, #16]

	pid->actual_val = (real_tick_freq_div256 * PWM_Period >> 8) * Encoder_pulse_short /
 80002e4:	4b3f      	ldr	r3, [pc, #252]	@ (80003e4 <PID_vel+0x128>)
 80002e6:	2264      	movs	r2, #100	@ 0x64
 80002e8:	fb02 f303 	mul.w	r3, r2, r3
 80002ec:	121b      	asrs	r3, r3, #8
 80002ee:	693a      	ldr	r2, [r7, #16]
 80002f0:	fb03 f202 	mul.w	r2, r3, r2
			((Encoder_Pulse_Every_round * real_tick_elapsed_div256) * Motor_Max_Velocity >> 16);
 80002f4:	212c      	movs	r1, #44	@ 0x2c
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	fb01 f303 	mul.w	r3, r1, r3
 80002fc:	215a      	movs	r1, #90	@ 0x5a
 80002fe:	fb01 f303 	mul.w	r3, r1, r3
 8000302:	141b      	asrs	r3, r3, #16
	pid->actual_val = (real_tick_freq_div256 * PWM_Period >> 8) * Encoder_pulse_short /
 8000304:	fb92 f2f3 	sdiv	r2, r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	605a      	str	r2, [r3, #4]
	//give the actual PWM pulse

	//			(PWM_Period * Encoder_pulse_short * Encoder_Read_freq
//			/ (Encoder_Pulse_Every_round * Motor_Max_Velocity)) << 8; //give the actual PWM pulse

	pid->LastError = pid->Error;
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	689a      	ldr	r2, [r3, #8]
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	60da      	str	r2, [r3, #12]
	pid->Error = pid->actual_val - pid->target_val;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	685a      	ldr	r2, [r3, #4]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	1ad2      	subs	r2, r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	609a      	str	r2, [r3, #8]

	pid->integral += pid->Error * real_tick_elapsed_div256 / real_tick_freq_div256;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	6979      	ldr	r1, [r7, #20]
 800032c:	fb01 f303 	mul.w	r3, r1, r3
 8000330:	492c      	ldr	r1, [pc, #176]	@ (80003e4 <PID_vel+0x128>)
 8000332:	fb93 f3f1 	sdiv	r3, r3, r1
 8000336:	441a      	add	r2, r3
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (pid->integral > (upper_integral << 8)) {
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000340:	2314      	movs	r3, #20
 8000342:	021b      	lsls	r3, r3, #8
 8000344:	429a      	cmp	r2, r3
 8000346:	dd04      	ble.n	8000352 <PID_vel+0x96>
		pid->integral = (upper_integral << 8);
 8000348:	2314      	movs	r3, #20
 800034a:	021a      	lsls	r2, r3, #8
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000350:	e00b      	b.n	800036a <PID_vel+0xae>
	} else if (pid->integral < -(upper_integral << 8)) {
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000356:	2314      	movs	r3, #20
 8000358:	021b      	lsls	r3, r3, #8
 800035a:	425b      	negs	r3, r3
 800035c:	429a      	cmp	r2, r3
 800035e:	da04      	bge.n	800036a <PID_vel+0xae>
		pid->integral = -(upper_integral << 8);
 8000360:	2314      	movs	r3, #20
 8000362:	021b      	lsls	r3, r3, #8
 8000364:	425a      	negs	r2, r3
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	pid->differential = (((pid->Error - pid->LastError) >> 4) * (real_tick_freq_div256 >> 4) / real_tick_elapsed_div256); // >> 8
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	689a      	ldr	r2, [r3, #8]
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	68db      	ldr	r3, [r3, #12]
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	111b      	asrs	r3, r3, #4
 8000376:	4a1b      	ldr	r2, [pc, #108]	@ (80003e4 <PID_vel+0x128>)
 8000378:	1112      	asrs	r2, r2, #4
 800037a:	fb03 f202 	mul.w	r2, r3, r2
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	fb92 f2f3 	sdiv	r2, r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	62da      	str	r2, [r3, #44]	@ 0x2c

	pid->output_val = pid->target_val
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	681a      	ldr	r2, [r3, #0]
					- pid->Error * pid->Kp_mul / pid->Kp_frac
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	68f9      	ldr	r1, [r7, #12]
 8000392:	6909      	ldr	r1, [r1, #16]
 8000394:	fb03 f101 	mul.w	r1, r3, r1
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	69db      	ldr	r3, [r3, #28]
 800039c:	fb91 f3f3 	sdiv	r3, r1, r3
 80003a0:	1ad2      	subs	r2, r2, r3
					- pid->integral * pid->Ki_mul / pid->Ki_frac
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80003a6:	68f9      	ldr	r1, [r7, #12]
 80003a8:	6949      	ldr	r1, [r1, #20]
 80003aa:	fb03 f101 	mul.w	r1, r3, r1
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	6a1b      	ldr	r3, [r3, #32]
 80003b2:	fb91 f3f3 	sdiv	r3, r1, r3
 80003b6:	1ad2      	subs	r2, r2, r3
					- pid->differential * pid->Kd_mul / pid->Kd_frac
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003bc:	68f9      	ldr	r1, [r7, #12]
 80003be:	6989      	ldr	r1, [r1, #24]
 80003c0:	fb03 f101 	mul.w	r1, r3, r1
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003c8:	fb91 f3f3 	sdiv	r3, r1, r3
 80003cc:	1ad2      	subs	r2, r2, r3
	pid->output_val = pid->target_val
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	631a      	str	r2, [r3, #48]	@ 0x30
					;
	return (pid->output_val >> 8);
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d6:	121b      	asrs	r3, r3, #8
}
 80003d8:	4618      	mov	r0, r3
 80003da:	371c      	adds	r7, #28
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	00044aa2 	.word	0x00044aa2

080003e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08a      	sub	sp, #40	@ 0x28
 80003ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0318 	add.w	r3, r7, #24
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fc:	4b3e      	ldr	r3, [pc, #248]	@ (80004f8 <MX_GPIO_Init+0x110>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a3d      	ldr	r2, [pc, #244]	@ (80004f8 <MX_GPIO_Init+0x110>)
 8000402:	f043 0310 	orr.w	r3, r3, #16
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b3b      	ldr	r3, [pc, #236]	@ (80004f8 <MX_GPIO_Init+0x110>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0310 	and.w	r3, r3, #16
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000414:	4b38      	ldr	r3, [pc, #224]	@ (80004f8 <MX_GPIO_Init+0x110>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a37      	ldr	r2, [pc, #220]	@ (80004f8 <MX_GPIO_Init+0x110>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b35      	ldr	r3, [pc, #212]	@ (80004f8 <MX_GPIO_Init+0x110>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0304 	and.w	r3, r3, #4
 8000428:	613b      	str	r3, [r7, #16]
 800042a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800042c:	4b32      	ldr	r3, [pc, #200]	@ (80004f8 <MX_GPIO_Init+0x110>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a31      	ldr	r2, [pc, #196]	@ (80004f8 <MX_GPIO_Init+0x110>)
 8000432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b2f      	ldr	r3, [pc, #188]	@ (80004f8 <MX_GPIO_Init+0x110>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b2c      	ldr	r3, [pc, #176]	@ (80004f8 <MX_GPIO_Init+0x110>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a2b      	ldr	r2, [pc, #172]	@ (80004f8 <MX_GPIO_Init+0x110>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b29      	ldr	r3, [pc, #164]	@ (80004f8 <MX_GPIO_Init+0x110>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0308 	and.w	r3, r3, #8
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4b26      	ldr	r3, [pc, #152]	@ (80004f8 <MX_GPIO_Init+0x110>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a25      	ldr	r2, [pc, #148]	@ (80004f8 <MX_GPIO_Init+0x110>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b23      	ldr	r3, [pc, #140]	@ (80004f8 <MX_GPIO_Init+0x110>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	607b      	str	r3, [r7, #4]
 8000472:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2102      	movs	r1, #2
 8000478:	4820      	ldr	r0, [pc, #128]	@ (80004fc <MX_GPIO_Init+0x114>)
 800047a:	f001 fcbf 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 4173 	mov.w	r1, #62208	@ 0xf300
 8000484:	481e      	ldr	r0, [pc, #120]	@ (8000500 <MX_GPIO_Init+0x118>)
 8000486:	f001 fcb9 	bl	8001dfc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000490:	481c      	ldr	r0, [pc, #112]	@ (8000504 <MX_GPIO_Init+0x11c>)
 8000492:	f001 fcb3 	bl	8001dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000496:	2302      	movs	r3, #2
 8000498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2302      	movs	r3, #2
 80004a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a6:	f107 0318 	add.w	r3, r7, #24
 80004aa:	4619      	mov	r1, r3
 80004ac:	4813      	ldr	r0, [pc, #76]	@ (80004fc <MX_GPIO_Init+0x114>)
 80004ae:	f001 fb11 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE12 PE13
                           PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13
 80004b2:	f44f 4373 	mov.w	r3, #62208	@ 0xf300
 80004b6:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b8:	2301      	movs	r3, #1
 80004ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c0:	2302      	movs	r3, #2
 80004c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004c4:	f107 0318 	add.w	r3, r7, #24
 80004c8:	4619      	mov	r1, r3
 80004ca:	480d      	ldr	r0, [pc, #52]	@ (8000500 <MX_GPIO_Init+0x118>)
 80004cc:	f001 fb02 	bl	8001ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	2302      	movs	r3, #2
 80004e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e2:	f107 0318 	add.w	r3, r7, #24
 80004e6:	4619      	mov	r1, r3
 80004e8:	4806      	ldr	r0, [pc, #24]	@ (8000504 <MX_GPIO_Init+0x11c>)
 80004ea:	f001 faf3 	bl	8001ad4 <HAL_GPIO_Init>

}
 80004ee:	bf00      	nop
 80004f0:	3728      	adds	r7, #40	@ 0x28
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40011000 	.word	0x40011000
 8000500:	40011800 	.word	0x40011800
 8000504:	40010c00 	.word	0x40010c00

08000508 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800050c:	b0ac      	sub	sp, #176	@ 0xb0
 800050e:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000510:	f001 f980 	bl	8001814 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000514:	f000 f9c4 	bl	80008a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000518:	f7ff ff66 	bl	80003e8 <MX_GPIO_Init>
	MX_TIM1_Init();
 800051c:	f000 fc3a 	bl	8000d94 <MX_TIM1_Init>
	MX_TIM3_Init();
 8000520:	f000 fce4 	bl	8000eec <MX_TIM3_Init>
	MX_TIM4_Init();
 8000524:	f000 fd36 	bl	8000f94 <MX_TIM4_Init>
	MX_TIM5_Init();
 8000528:	f000 fd88 	bl	800103c <MX_TIM5_Init>
	MX_TIM8_Init();
 800052c:	f000 fe46 	bl	80011bc <MX_TIM8_Init>
	MX_TIM6_Init();
 8000530:	f000 fdd8 	bl	80010e4 <MX_TIM6_Init>
	MX_USART3_UART_Init();
 8000534:	f001 f88a 	bl	800164c <MX_USART3_UART_Init>
	MX_USART1_UART_Init();
 8000538:	f001 f85e 	bl	80015f8 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 800053c:	f000 fe08 	bl	8001150 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	const uint8_t max_attempt = 5;
 8000540:	2305      	movs	r3, #5
 8000542:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

	uint8_t buffer[16] =
 8000546:	4bd1      	ldr	r3, [pc, #836]	@ (800088c <main+0x384>)
 8000548:	f107 0678 	add.w	r6, r7, #120	@ 0x78
 800054c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800054e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			{ 0, 0, 0, 0, 5, 1, 1, 100, 1, 10, 5, 1, 1, 100, 1, 10 }; // buffer used to receive messages
	uint8_t buffer_0x80 = 0; // buffer used to receive 0x80
 8000552:	2300      	movs	r3, #0
 8000554:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	uint8_t reset_flag = 0; // software reset flag
 8000558:	2300      	movs	r3, #0
 800055a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
	uint8_t encoder_1 = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
	uint8_t encoder_2 = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
	uint8_t encoder_3 = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
	uint8_t encoder_4 = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

	struct PID_struct PID_obj_1;
	struct PID_struct PID_obj_2;

	PID_init(&PID_obj_1, buffer[4], buffer[5], buffer[6], buffer[7], buffer[8],
 8000576:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800057a:	461e      	mov	r6, r3
 800057c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8000580:	469c      	mov	ip, r3
 8000582:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000586:	469e      	mov	lr, r3
 8000588:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800058c:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
			buffer[9]);
 8000590:	f897 1081 	ldrb.w	r1, [r7, #129]	@ 0x81
	PID_init(&PID_obj_1, buffer[4], buffer[5], buffer[6], buffer[7], buffer[8],
 8000594:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000598:	9102      	str	r1, [sp, #8]
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	4673      	mov	r3, lr
 80005a0:	4662      	mov	r2, ip
 80005a2:	4631      	mov	r1, r6
 80005a4:	f7ff fe3e 	bl	8000224 <PID_init>
	PID_init(&PID_obj_2, buffer[10], buffer[11], buffer[12], buffer[13],
 80005a8:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 80005ac:	461e      	mov	r6, r3
 80005ae:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 80005b2:	469c      	mov	ip, r3
 80005b4:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 80005b8:	469e      	mov	lr, r3
 80005ba:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
			buffer[14], buffer[15]);
 80005be:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 80005c2:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
	PID_init(&PID_obj_2, buffer[10], buffer[11], buffer[12], buffer[13],
 80005c6:	f107 000c 	add.w	r0, r7, #12
 80005ca:	9102      	str	r1, [sp, #8]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4673      	mov	r3, lr
 80005d2:	4662      	mov	r2, ip
 80005d4:	4631      	mov	r1, r6
 80005d6:	f7ff fe25 	bl	8000224 <PID_init>

	motor_init();
 80005da:	f000 f9df 	bl	800099c <motor_init>
	HAL_TIM_Base_Start(&htim6);
 80005de:	48ac      	ldr	r0, [pc, #688]	@ (8000890 <main+0x388>)
 80005e0:	f002 f884 	bl	80026ec <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ea:	48aa      	ldr	r0, [pc, #680]	@ (8000894 <main+0x38c>)
 80005ec:	f001 fc06 	bl	8001dfc <HAL_GPIO_WritePin>

	// receive controlling message
	for (uint8_t attempt_count = 0; attempt_count < max_attempt;
 80005f0:	2300      	movs	r3, #0
 80005f2:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
 80005f6:	bf00      	nop
 80005f8:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 80005fc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000600:	429a      	cmp	r2, r3
 8000602:	d214      	bcs.n	800062e <main+0x126>
			++attempt_count) {
		HAL_UART_Receive(&huart3, &buffer_0x80, 1, 500);
 8000604:	f107 0177 	add.w	r1, r7, #119	@ 0x77
 8000608:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800060c:	2201      	movs	r2, #1
 800060e:	48a2      	ldr	r0, [pc, #648]	@ (8000898 <main+0x390>)
 8000610:	f003 f914 	bl	800383c <HAL_UART_Receive>
		if (buffer_0x80 == 0x80)
 8000614:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000618:	2b80      	cmp	r3, #128	@ 0x80
 800061a:	d107      	bne.n	800062c <main+0x124>
			HAL_UART_Receive(&huart3, buffer, 16, 500);
 800061c:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8000620:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000624:	2210      	movs	r2, #16
 8000626:	489c      	ldr	r0, [pc, #624]	@ (8000898 <main+0x390>)
 8000628:	f003 f908 	bl	800383c <HAL_UART_Receive>
		break;
 800062c:	bf00      	nop

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800062e:	466b      	mov	r3, sp
 8000630:	469a      	mov	sl, r3
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// soft reset controller
		HAL_UART_Receive(&huart3, &reset_flag, 1, 100);
 8000632:	f107 0176 	add.w	r1, r7, #118	@ 0x76
 8000636:	2364      	movs	r3, #100	@ 0x64
 8000638:	2201      	movs	r2, #1
 800063a:	4897      	ldr	r0, [pc, #604]	@ (8000898 <main+0x390>)
 800063c:	f003 f8fe 	bl	800383c <HAL_UART_Receive>
		if (reset_flag == 0x77) {
 8000640:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8000644:	2b77      	cmp	r3, #119	@ 0x77
 8000646:	d109      	bne.n	800065c <main+0x154>
 8000648:	2301      	movs	r3, #1
 800064a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 800064e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000652:	f383 8813 	msr	FAULTMASK, r3
}
 8000656:	bf00      	nop
			__set_FAULTMASK(1);			// close all interruption
			HAL_NVIC_SystemReset();	    // software reset
 8000658:	f001 fa2b 	bl	8001ab2 <HAL_NVIC_SystemReset>
		}

		PID_change_para(&PID_obj_1, buffer[4], buffer[5], buffer[6], buffer[7],
 800065c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000660:	461e      	mov	r6, r3
 8000662:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8000666:	469c      	mov	ip, r3
 8000668:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800066c:	469e      	mov	lr, r3
 800066e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
				buffer[8], buffer[9]);
 8000672:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 8000676:	f897 1081 	ldrb.w	r1, [r7, #129]	@ 0x81
		PID_change_para(&PID_obj_1, buffer[4], buffer[5], buffer[6], buffer[7],
 800067a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800067e:	9102      	str	r1, [sp, #8]
 8000680:	9201      	str	r2, [sp, #4]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4673      	mov	r3, lr
 8000686:	4662      	mov	r2, ip
 8000688:	4631      	mov	r1, r6
 800068a:	f7ff fdf8 	bl	800027e <PID_change_para>
		PID_change_para(&PID_obj_2, buffer[10], buffer[11], buffer[12],
 800068e:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 8000692:	461e      	mov	r6, r3
 8000694:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8000698:	469c      	mov	ip, r3
 800069a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800069e:	469e      	mov	lr, r3
				buffer[13], buffer[14], buffer[15]);
 80006a0:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 80006a4:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 80006a8:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
		PID_change_para(&PID_obj_2, buffer[10], buffer[11], buffer[12],
 80006ac:	f107 000c 	add.w	r0, r7, #12
 80006b0:	9102      	str	r1, [sp, #8]
 80006b2:	9201      	str	r2, [sp, #4]
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	4673      	mov	r3, lr
 80006b8:	4662      	mov	r2, ip
 80006ba:	4631      	mov	r1, r6
 80006bc:	f7ff fddf 	bl	800027e <PID_change_para>

		const uint8_t head_length = 6;
 80006c0:	2306      	movs	r3, #6
 80006c2:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
		uint8_t head[head_length];
 80006c6:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80006ca:	3b01      	subs	r3, #1
 80006cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80006d0:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80006d4:	2200      	movs	r2, #0
 80006d6:	461c      	mov	r4, r3
 80006d8:	4615      	mov	r5, r2
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	00eb      	lsls	r3, r5, #3
 80006e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006e8:	00e2      	lsls	r2, r4, #3
 80006ea:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80006ee:	2200      	movs	r2, #0
 80006f0:	4698      	mov	r8, r3
 80006f2:	4691      	mov	r9, r2
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	f04f 0300 	mov.w	r3, #0
 80006fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000700:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000704:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000708:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800070c:	3307      	adds	r3, #7
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	ebad 0d03 	sub.w	sp, sp, r3
 8000716:	ab04      	add	r3, sp, #16
 8000718:	3300      	adds	r3, #0
 800071a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		memset(head, 170, head_length);
 800071e:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000722:	461a      	mov	r2, r3
 8000724:	21aa      	movs	r1, #170	@ 0xaa
 8000726:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800072a:	f003 fa67 	bl	8003bfc <memset>
		HAL_UART_Transmit(&huart1, head, head_length, 50);
 800072e:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 8000732:	b29a      	uxth	r2, r3
 8000734:	2332      	movs	r3, #50	@ 0x32
 8000736:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800073a:	4858      	ldr	r0, [pc, #352]	@ (800089c <main+0x394>)
 800073c:	f002 fff3 	bl	8003726 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, buffer, 4, 50);
 8000740:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8000744:	2332      	movs	r3, #50	@ 0x32
 8000746:	2204      	movs	r2, #4
 8000748:	4854      	ldr	r0, [pc, #336]	@ (800089c <main+0x394>)
 800074a:	f002 ffec 	bl	8003726 <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart1, (uint8_t*) "Received\n", 9, 50);

//		uint32_t t = get_real_tick();

		uint32_t real_tick_2;
		uint16_t encoder_CNT_2 = get_encoder_CNT(2, &real_tick_2);
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	4619      	mov	r1, r3
 8000754:	2002      	movs	r0, #2
 8000756:	f000 fa41 	bl	8000bdc <get_encoder_CNT>
 800075a:	4603      	mov	r3, r0
 800075c:	80fb      	strh	r3, [r7, #6]
		set_motor_speed(2,
				PID_vel(&PID_obj_2, buffer[1], encoder_CNT_2, real_tick_2));
 800075e:	f897 1079 	ldrb.w	r1, [r7, #121]	@ 0x79
		set_motor_speed(2,
 8000762:	88fa      	ldrh	r2, [r7, #6]
				PID_vel(&PID_obj_2, buffer[1], encoder_CNT_2, real_tick_2));
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	f107 000c 	add.w	r0, r7, #12
 800076a:	f7ff fda7 	bl	80002bc <PID_vel>
 800076e:	4603      	mov	r3, r0
		set_motor_speed(2,
 8000770:	4619      	mov	r1, r3
 8000772:	2002      	movs	r0, #2
 8000774:	f000 f966 	bl	8000a44 <set_motor_speed>

//		HAL_UART_Transmit(&huart1, (uint8_t*)(&t), 4, 50);
//		HAL_UART_Transmit(&huart1, (uint8_t*)(&real_tick_2), 4, 50);
		HAL_UART_Transmit(&huart1, (uint8_t*) (&encoder_CNT_2), 2, 50);
 8000778:	1db9      	adds	r1, r7, #6
 800077a:	2332      	movs	r3, #50	@ 0x32
 800077c:	2202      	movs	r2, #2
 800077e:	4847      	ldr	r0, [pc, #284]	@ (800089c <main+0x394>)
 8000780:	f002 ffd1 	bl	8003726 <HAL_UART_Transmit>
//		PID_vel(&PID_obj_2, buffer[1], encoder_CNT_2, real_tick_2);
		HAL_UART_Transmit(&huart1, (uint8_t*) (&PID_obj_2.actual_val), 4, 50);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	1d19      	adds	r1, r3, #4
 800078a:	2332      	movs	r3, #50	@ 0x32
 800078c:	2204      	movs	r2, #4
 800078e:	4843      	ldr	r0, [pc, #268]	@ (800089c <main+0x394>)
 8000790:	f002 ffc9 	bl	8003726 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) (&PID_obj_2.target_val), 4, 50);
 8000794:	f107 010c 	add.w	r1, r7, #12
 8000798:	2332      	movs	r3, #50	@ 0x32
 800079a:	2204      	movs	r2, #4
 800079c:	483f      	ldr	r0, [pc, #252]	@ (800089c <main+0x394>)
 800079e:	f002 ffc2 	bl	8003726 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) (&PID_obj_2.output_val), 4, 50);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80007aa:	2332      	movs	r3, #50	@ 0x32
 80007ac:	2204      	movs	r2, #4
 80007ae:	483b      	ldr	r0, [pc, #236]	@ (800089c <main+0x394>)
 80007b0:	f002 ffb9 	bl	8003726 <HAL_UART_Transmit>

		uint32_t real_tick_1;
		uint16_t encoder_CNT_1 = get_encoder_CNT(1, &real_tick_1);
 80007b4:	463b      	mov	r3, r7
 80007b6:	4619      	mov	r1, r3
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 fa0f 	bl	8000bdc <get_encoder_CNT>
 80007be:	4603      	mov	r3, r0
 80007c0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
		set_motor_speed(1,
				PID_vel(&PID_obj_1, buffer[0], encoder_CNT_1, real_tick_1));
 80007c4:	f897 1078 	ldrb.w	r1, [r7, #120]	@ 0x78
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80007ce:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80007d2:	f7ff fd73 	bl	80002bc <PID_vel>
 80007d6:	4603      	mov	r3, r0
		set_motor_speed(1,
 80007d8:	4619      	mov	r1, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	f000 f932 	bl	8000a44 <set_motor_speed>
		PID_vel(&PID_obj_1, buffer[0], encoder_CNT_1, real_tick_1);
 80007e0:	f897 1078 	ldrb.w	r1, [r7, #120]	@ 0x78
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80007ea:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80007ee:	f7ff fd65 	bl	80002bc <PID_vel>
//		HAL_UART_Transmit(&huart1, (uint8_t*)(&real_tick_1), 4, 50);
//		HAL_UART_Transmit(&huart1, (uint8_t*)(&encoder_CNT_1), 2, 50);
		HAL_UART_Transmit(&huart1, (uint8_t*) (&PID_obj_1.actual_val), 4, 50);
 80007f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007f6:	1d19      	adds	r1, r3, #4
 80007f8:	2332      	movs	r3, #50	@ 0x32
 80007fa:	2204      	movs	r2, #4
 80007fc:	4827      	ldr	r0, [pc, #156]	@ (800089c <main+0x394>)
 80007fe:	f002 ff92 	bl	8003726 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) (&PID_obj_1.target_val), 4, 50);
 8000802:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000806:	2332      	movs	r3, #50	@ 0x32
 8000808:	2204      	movs	r2, #4
 800080a:	4824      	ldr	r0, [pc, #144]	@ (800089c <main+0x394>)
 800080c:	f002 ff8b 	bl	8003726 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*) (&PID_obj_1.output_val), 4, 50);
 8000810:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000814:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8000818:	2332      	movs	r3, #50	@ 0x32
 800081a:	2204      	movs	r2, #4
 800081c:	481f      	ldr	r0, [pc, #124]	@ (800089c <main+0x394>)
 800081e:	f002 ff82 	bl	8003726 <HAL_UART_Transmit>

		PID_obj_1.integral -= PID_obj_1.integral >> 8;
 8000822:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000824:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000826:	121b      	asrs	r3, r3, #8
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	66bb      	str	r3, [r7, #104]	@ 0x68
		PID_obj_2.integral -= PID_obj_2.integral >> 8;
 800082c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800082e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000830:	121b      	asrs	r3, r3, #8
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	637b      	str	r3, [r7, #52]	@ 0x34

		if (encoder_CNT_1 == 0 && encoder_CNT_2 == 0) {
 8000836:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800083a:	2b00      	cmp	r3, #0
 800083c:	d106      	bne.n	800084c <main+0x344>
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d103      	bne.n	800084c <main+0x344>
			PID_obj_1.integral = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	66bb      	str	r3, [r7, #104]	@ 0x68
			PID_obj_2.integral = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	@ 0x34
//		encoder_1 = convert(get_encoder_CNT(2), 1);
//		encoder_2 = convert(get_encoder_CNT(2), 2);
//		encoder_3 = convert(get_encoder_CNT(1), 1);
//		encoder_4 = convert(get_encoder_CNT(1), 2);

		send_message(encoder_1, encoder_2, encoder_3, encoder_4, 0, 0, 0, 0);
 800084c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8000850:	f897 209c 	ldrb.w	r2, [r7, #156]	@ 0x9c
 8000854:	f897 109d 	ldrb.w	r1, [r7, #157]	@ 0x9d
 8000858:	f897 009e 	ldrb.w	r0, [r7, #158]	@ 0x9e
 800085c:	2600      	movs	r6, #0
 800085e:	9603      	str	r6, [sp, #12]
 8000860:	2600      	movs	r6, #0
 8000862:	9602      	str	r6, [sp, #8]
 8000864:	2600      	movs	r6, #0
 8000866:	9601      	str	r6, [sp, #4]
 8000868:	2600      	movs	r6, #0
 800086a:	9600      	str	r6, [sp, #0]
 800086c:	f000 f864 	bl	8000938 <send_message>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);

		//time controller
		while (__HAL_TIM_GET_COUNTER(&htim6) < 1000) {
 8000870:	bf00      	nop
 8000872:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <main+0x388>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000878:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800087c:	d3f9      	bcc.n	8000872 <main+0x36a>
		}
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <main+0x388>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
 8000886:	46d5      	mov	sp, sl
	while (1) {
 8000888:	e6d1      	b.n	800062e <main+0x126>
 800088a:	bf00      	nop
 800088c:	08003c6c 	.word	0x08003c6c
 8000890:	20000154 	.word	0x20000154
 8000894:	40010c00 	.word	0x40010c00
 8000898:	20000274 	.word	0x20000274
 800089c:	2000022c 	.word	0x2000022c

080008a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	@ 0x40
 80008a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	2228      	movs	r2, #40	@ 0x28
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 f9a4 	bl	8003bfc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ca:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008dc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008de:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80008e4:	f107 0318 	add.w	r3, r7, #24
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fa9f 	bl	8001e2c <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x58>
		Error_Handler();
 80008f4:	f000 f819 	bl	800092a <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008f8:	230f      	movs	r3, #15
 80008fa:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2302      	movs	r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000904:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000908:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2102      	movs	r1, #2
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fd0c 	bl	8002330 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x82>
		Error_Handler();
 800091e:	f000 f804 	bl	800092a <Error_Handler>
	}
}
 8000922:	bf00      	nop
 8000924:	3740      	adds	r7, #64	@ 0x40
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800092e:	b672      	cpsid	i
}
 8000930:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000932:	bf00      	nop
 8000934:	e7fd      	b.n	8000932 <Error_Handler+0x8>
	...

08000938 <send_message>:
#include "message.h"



void send_message(uint8_t data_1, uint8_t data_2, uint8_t data_3, uint8_t data_4, uint8_t data_5, uint8_t data_6, uint8_t data_7, uint8_t data_8)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	4604      	mov	r4, r0
 8000940:	4608      	mov	r0, r1
 8000942:	4611      	mov	r1, r2
 8000944:	461a      	mov	r2, r3
 8000946:	4623      	mov	r3, r4
 8000948:	71fb      	strb	r3, [r7, #7]
 800094a:	4603      	mov	r3, r0
 800094c:	71bb      	strb	r3, [r7, #6]
 800094e:	460b      	mov	r3, r1
 8000950:	717b      	strb	r3, [r7, #5]
 8000952:	4613      	mov	r3, r2
 8000954:	713b      	strb	r3, [r7, #4]
	uint8_t data[9] = {80, data_1, data_2, data_3, data_4, data_5, data_6, data_7, data_8};
 8000956:	2350      	movs	r3, #80	@ 0x50
 8000958:	733b      	strb	r3, [r7, #12]
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	737b      	strb	r3, [r7, #13]
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	73bb      	strb	r3, [r7, #14]
 8000962:	797b      	ldrb	r3, [r7, #5]
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	793b      	ldrb	r3, [r7, #4]
 8000968:	743b      	strb	r3, [r7, #16]
 800096a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800096e:	747b      	strb	r3, [r7, #17]
 8000970:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000974:	74bb      	strb	r3, [r7, #18]
 8000976:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800097a:	74fb      	strb	r3, [r7, #19]
 800097c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000980:	753b      	strb	r3, [r7, #20]
	HAL_UART_Transmit(&huart3, data, 9, 20);
 8000982:	f107 010c 	add.w	r1, r7, #12
 8000986:	2314      	movs	r3, #20
 8000988:	2209      	movs	r2, #9
 800098a:	4803      	ldr	r0, [pc, #12]	@ (8000998 <send_message+0x60>)
 800098c:	f002 fecb 	bl	8003726 <HAL_UART_Transmit>
}
 8000990:	bf00      	nop
 8000992:	371c      	adds	r7, #28
 8000994:	46bd      	mov	sp, r7
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	20000274 	.word	0x20000274

0800099c <motor_init>:
#include "tim.h"
#include "gpio.h"
#include "motor.h"
#include "tick.h"

void motor_init() {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_ALL);
 80009a0:	213c      	movs	r1, #60	@ 0x3c
 80009a2:	4822      	ldr	r0, [pc, #136]	@ (8000a2c <motor_init+0x90>)
 80009a4:	f001 ff52 	bl	800284c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80009a8:	2100      	movs	r1, #0
 80009aa:	4821      	ldr	r0, [pc, #132]	@ (8000a30 <motor_init+0x94>)
 80009ac:	f001 ff4e 	bl	800284c <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b6:	481f      	ldr	r0, [pc, #124]	@ (8000a34 <motor_init+0x98>)
 80009b8:	f001 fa20 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c2:	481c      	ldr	r0, [pc, #112]	@ (8000a34 <motor_init+0x98>)
 80009c4:	f001 fa1a 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ce:	4819      	ldr	r0, [pc, #100]	@ (8000a34 <motor_init+0x98>)
 80009d0:	f001 fa14 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009da:	4816      	ldr	r0, [pc, #88]	@ (8000a34 <motor_init+0x98>)
 80009dc:	f001 fa0e 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e6:	4813      	ldr	r0, [pc, #76]	@ (8000a34 <motor_init+0x98>)
 80009e8:	f001 fa08 	bl	8001dfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009f2:	4810      	ldr	r0, [pc, #64]	@ (8000a34 <motor_init+0x98>)
 80009f4:	f001 fa02 	bl	8001dfc <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009f8:	2100      	movs	r1, #0
 80009fa:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <motor_init+0x90>)
 80009fc:	f001 ff26 	bl	800284c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000a00:	2104      	movs	r1, #4
 8000a02:	480a      	ldr	r0, [pc, #40]	@ (8000a2c <motor_init+0x90>)
 8000a04:	f001 ff22 	bl	800284c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000a08:	2108      	movs	r1, #8
 8000a0a:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <motor_init+0x90>)
 8000a0c:	f001 ff1e 	bl	800284c <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000a10:	213c      	movs	r1, #60	@ 0x3c
 8000a12:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <motor_init+0x9c>)
 8000a14:	f002 f876 	bl	8002b04 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000a18:	213c      	movs	r1, #60	@ 0x3c
 8000a1a:	4808      	ldr	r0, [pc, #32]	@ (8000a3c <motor_init+0xa0>)
 8000a1c:	f002 f872 	bl	8002b04 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000a20:	213c      	movs	r1, #60	@ 0x3c
 8000a22:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <motor_init+0xa4>)
 8000a24:	f002 f86e 	bl	8002b04 <HAL_TIM_Encoder_Start>
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000034 	.word	0x20000034
 8000a30:	200001e4 	.word	0x200001e4
 8000a34:	40011800 	.word	0x40011800
 8000a38:	2000010c 	.word	0x2000010c
 8000a3c:	2000007c 	.word	0x2000007c
 8000a40:	200000c4 	.word	0x200000c4

08000a44 <set_motor_speed>:

void set_motor_speed(int num, int pulse){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
	if(num == 1){
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d139      	bne.n	8000ac8 <set_motor_speed+0x84>
		if (pulse > 0) {
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	dd10      	ble.n	8000a7c <set_motor_speed+0x38>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET); //IN1
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a60:	485b      	ldr	r0, [pc, #364]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000a62:	f001 f9cb 	bl	8001dfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET); //IN2
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6c:	4858      	ldr	r0, [pc, #352]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000a6e:	f001 f9c5 	bl	8001dfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse); //Set CCR, also called 'pulse'
 8000a72:	4b58      	ldr	r3, [pc, #352]	@ (8000bd4 <set_motor_speed+0x190>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
		}
	}
	else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//Show errors}
	}
	}
 8000a7a:	e0a5      	b.n	8000bc8 <set_motor_speed+0x184>
		} else if (pulse < 0) {
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da11      	bge.n	8000aa6 <set_motor_speed+0x62>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET); //IN1
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a88:	4851      	ldr	r0, [pc, #324]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000a8a:	f001 f9b7 	bl	8001dfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET); //IN2
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a94:	484e      	ldr	r0, [pc, #312]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000a96:	f001 f9b1 	bl	8001dfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, -pulse);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	425a      	negs	r2, r3
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd4 <set_motor_speed+0x190>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8000aa4:	e090      	b.n	8000bc8 <set_motor_speed+0x184>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET); //IN1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aac:	4848      	ldr	r0, [pc, #288]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000aae:	f001 f9a5 	bl	8001dfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET); //IN2
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab8:	4845      	ldr	r0, [pc, #276]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000aba:	f001 f99f 	bl	8001dfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000abe:	4b45      	ldr	r3, [pc, #276]	@ (8000bd4 <set_motor_speed+0x190>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	635a      	str	r2, [r3, #52]	@ 0x34
	}
 8000ac6:	e07f      	b.n	8000bc8 <set_motor_speed+0x184>
	else if(num==2){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d139      	bne.n	8000b42 <set_motor_speed+0xfe>
		if (pulse > 0) {
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	dd10      	ble.n	8000af6 <set_motor_speed+0xb2>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET); //IN1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ada:	483d      	ldr	r0, [pc, #244]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000adc:	f001 f98e 	bl	8001dfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET); //IN2
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ae6:	483a      	ldr	r0, [pc, #232]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000ae8:	f001 f988 	bl	8001dfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse); //Set CCR, also called 'pulse'
 8000aec:	4b39      	ldr	r3, [pc, #228]	@ (8000bd4 <set_motor_speed+0x190>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	639a      	str	r2, [r3, #56]	@ 0x38
	}
 8000af4:	e068      	b.n	8000bc8 <set_motor_speed+0x184>
		} else if (pulse < 0) {
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	da11      	bge.n	8000b20 <set_motor_speed+0xdc>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); //IN1
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b02:	4833      	ldr	r0, [pc, #204]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000b04:	f001 f97a 	bl	8001dfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET); //IN2
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b0e:	4830      	ldr	r0, [pc, #192]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000b10:	f001 f974 	bl	8001dfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -pulse);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	425a      	negs	r2, r3
 8000b18:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd4 <set_motor_speed+0x190>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	639a      	str	r2, [r3, #56]	@ 0x38
	}
 8000b1e:	e053      	b.n	8000bc8 <set_motor_speed+0x184>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET); //IN1
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b26:	482a      	ldr	r0, [pc, #168]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000b28:	f001 f968 	bl	8001dfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET); //IN2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b32:	4827      	ldr	r0, [pc, #156]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000b34:	f001 f962 	bl	8001dfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000b38:	4b26      	ldr	r3, [pc, #152]	@ (8000bd4 <set_motor_speed+0x190>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	639a      	str	r2, [r3, #56]	@ 0x38
	}
 8000b40:	e042      	b.n	8000bc8 <set_motor_speed+0x184>
	else if(num==3){
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d139      	bne.n	8000bbc <set_motor_speed+0x178>
		if (pulse > 0) {
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dd10      	ble.n	8000b70 <set_motor_speed+0x12c>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET); //IN1
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b54:	481e      	ldr	r0, [pc, #120]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000b56:	f001 f951 	bl	8001dfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET); //IN2
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b60:	481b      	ldr	r0, [pc, #108]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000b62:	f001 f94b 	bl	8001dfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse); //Set CCR, also called 'pulse'
 8000b66:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <set_motor_speed+0x190>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
 8000b6e:	e02b      	b.n	8000bc8 <set_motor_speed+0x184>
		} else if (pulse < 0) {
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	da11      	bge.n	8000b9a <set_motor_speed+0x156>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET); //IN1
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b7c:	4814      	ldr	r0, [pc, #80]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000b7e:	f001 f93d 	bl	8001dfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET); //IN2
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b88:	4811      	ldr	r0, [pc, #68]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000b8a:	f001 f937 	bl	8001dfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, -pulse);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	425a      	negs	r2, r3
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <set_motor_speed+0x190>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
 8000b98:	e016      	b.n	8000bc8 <set_motor_speed+0x184>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET); //IN1
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ba0:	480b      	ldr	r0, [pc, #44]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000ba2:	f001 f92b 	bl	8001dfc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET); //IN2
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bac:	4808      	ldr	r0, [pc, #32]	@ (8000bd0 <set_motor_speed+0x18c>)
 8000bae:	f001 f925 	bl	8001dfc <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000bb2:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <set_motor_speed+0x190>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
 8000bba:	e005      	b.n	8000bc8 <set_motor_speed+0x184>
	else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//Show errors}
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <set_motor_speed+0x194>)
 8000bc4:	f001 f91a 	bl	8001dfc <HAL_GPIO_WritePin>
	}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40011800 	.word	0x40011800
 8000bd4:	20000034 	.word	0x20000034
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <get_encoder_CNT>:

uint16_t get_encoder_CNT(int num, uint32_t* out_real_tick_elapsed){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
	uint16_t iTimEncoder = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	81fb      	strh	r3, [r7, #14]
	static int32_t last_call[3];
	int32_t t = get_real_tick();
 8000bea:	f000 f8bd 	bl	8000d68 <get_real_tick>
 8000bee:	60b8      	str	r0, [r7, #8]
	if(num == 1){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d112      	bne.n	8000c1c <get_encoder_CNT+0x40>
		*out_real_tick_elapsed = t - last_call[0];
 8000bf6:	4b25      	ldr	r3, [pc, #148]	@ (8000c8c <get_encoder_CNT+0xb0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	601a      	str	r2, [r3, #0]
		last_call[0] = t;
 8000c04:	4a21      	ldr	r2, [pc, #132]	@ (8000c8c <get_encoder_CNT+0xb0>)
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	6013      	str	r3, [r2, #0]
		iTimEncoder = __HAL_TIM_GET_COUNTER(&htim5);
 8000c0a:	4b21      	ldr	r3, [pc, #132]	@ (8000c90 <get_encoder_CNT+0xb4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c10:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(&htim5,0);
 8000c12:	4b1f      	ldr	r3, [pc, #124]	@ (8000c90 <get_encoder_CNT+0xb4>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2200      	movs	r2, #0
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
 8000c1a:	e031      	b.n	8000c80 <get_encoder_CNT+0xa4>
	}
	else if(num == 2){
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d112      	bne.n	8000c48 <get_encoder_CNT+0x6c>
		*out_real_tick_elapsed = t - last_call[1];
 8000c22:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <get_encoder_CNT+0xb0>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	601a      	str	r2, [r3, #0]
		last_call[1] = t;
 8000c30:	4a16      	ldr	r2, [pc, #88]	@ (8000c8c <get_encoder_CNT+0xb0>)
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	6053      	str	r3, [r2, #4]
		iTimEncoder = __HAL_TIM_GET_COUNTER(&htim3);
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <get_encoder_CNT+0xb8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3c:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(&htim3,0);
 8000c3e:	4b15      	ldr	r3, [pc, #84]	@ (8000c94 <get_encoder_CNT+0xb8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	@ 0x24
 8000c46:	e01b      	b.n	8000c80 <get_encoder_CNT+0xa4>
	}
	else if(num == 3){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d112      	bne.n	8000c74 <get_encoder_CNT+0x98>
		*out_real_tick_elapsed = t - last_call[2];
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <get_encoder_CNT+0xb0>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	601a      	str	r2, [r3, #0]
		last_call[2] = t;
 8000c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c8c <get_encoder_CNT+0xb0>)
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	6093      	str	r3, [r2, #8]
		iTimEncoder = __HAL_TIM_GET_COUNTER(&htim4);
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <get_encoder_CNT+0xbc>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c68:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(&htim4,0);
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <get_encoder_CNT+0xbc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
 8000c72:	e005      	b.n	8000c80 <get_encoder_CNT+0xa4>
	}
	else{HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);//Show errors
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c7a:	4808      	ldr	r0, [pc, #32]	@ (8000c9c <get_encoder_CNT+0xc0>)
 8000c7c:	f001 f8be 	bl	8001dfc <HAL_GPIO_WritePin>
	}
	return iTimEncoder;
 8000c80:	89fb      	ldrh	r3, [r7, #14]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000028 	.word	0x20000028
 8000c90:	2000010c 	.word	0x2000010c
 8000c94:	2000007c 	.word	0x2000007c
 8000c98:	200000c4 	.word	0x200000c4
 8000c9c:	40010c00 	.word	0x40010c00

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4a14      	ldr	r2, [pc, #80]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6193      	str	r3, [r2, #24]
 8000cb2:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	61d3      	str	r3, [r2, #28]
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <HAL_MspInit+0x5c>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d00 <HAL_MspInit+0x60>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_MspInit+0x60>)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010000 	.word	0x40010000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <NMI_Handler+0x4>

08000d0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr

08000d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 fda4 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <get_real_tick>:
 */


#include "stm32f1xx_hal.h"

int32_t get_real_tick(){
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
	return (uwTick + 1) * 72000 - SysTick->VAL;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <get_real_tick+0x20>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3301      	adds	r3, #1
 8000d72:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <get_real_tick+0x24>)
 8000d74:	fb03 f202 	mul.w	r2, r3, r2
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <get_real_tick+0x28>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200002bc 	.word	0x200002bc
 8000d8c:	00011940 	.word	0x00011940
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b096      	sub	sp, #88	@ 0x58
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2220      	movs	r2, #32
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f002 ff15 	bl	8003bfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dd2:	4b44      	ldr	r3, [pc, #272]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000dd4:	4a44      	ldr	r2, [pc, #272]	@ (8000ee8 <MX_TIM1_Init+0x154>)
 8000dd6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000dd8:	4b42      	ldr	r3, [pc, #264]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000dda:	2247      	movs	r2, #71	@ 0x47
 8000ddc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b41      	ldr	r3, [pc, #260]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000de4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000de6:	2263      	movs	r2, #99	@ 0x63
 8000de8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b3e      	ldr	r3, [pc, #248]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dfc:	4839      	ldr	r0, [pc, #228]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000dfe:	f001 fc25 	bl	800264c <HAL_TIM_Base_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000e08:	f7ff fd8f 	bl	800092a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e10:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e12:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e16:	4619      	mov	r1, r3
 8000e18:	4832      	ldr	r0, [pc, #200]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000e1a:	f001 ffc3 	bl	8002da4 <HAL_TIM_ConfigClockSource>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e24:	f7ff fd81 	bl	800092a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e28:	482e      	ldr	r0, [pc, #184]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000e2a:	f001 fcb7 	bl	800279c <HAL_TIM_PWM_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000e34:	f7ff fd79 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e44:	4619      	mov	r1, r3
 8000e46:	4827      	ldr	r0, [pc, #156]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000e48:	f002 fb60 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000e52:	f7ff fd6a 	bl	800092a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e56:	2360      	movs	r3, #96	@ 0x60
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 100;
 8000e5a:	2364      	movs	r3, #100	@ 0x64
 8000e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e62:	2300      	movs	r3, #0
 8000e64:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e76:	2200      	movs	r2, #0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481a      	ldr	r0, [pc, #104]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000e7c:	f001 fed0 	bl	8002c20 <HAL_TIM_PWM_ConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000e86:	f7ff fd50 	bl	800092a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8e:	2204      	movs	r2, #4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4814      	ldr	r0, [pc, #80]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000e94:	f001 fec4 	bl	8002c20 <HAL_TIM_PWM_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000e9e:	f7ff fd44 	bl	800092a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000ec6:	f002 fb8d 	bl	80035e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000ed0:	f7ff fd2b 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ed4:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <MX_TIM1_Init+0x150>)
 8000ed6:	f000 fb39 	bl	800154c <HAL_TIM_MspPostInit>

}
 8000eda:	bf00      	nop
 8000edc:	3758      	adds	r7, #88	@ 0x58
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000034 	.word	0x20000034
 8000ee8:	40012c00 	.word	0x40012c00

08000eec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	@ 0x30
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	2224      	movs	r2, #36	@ 0x24
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fe7e 	bl	8003bfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f08:	4b20      	ldr	r3, [pc, #128]	@ (8000f8c <MX_TIM3_Init+0xa0>)
 8000f0a:	4a21      	ldr	r2, [pc, #132]	@ (8000f90 <MX_TIM3_Init+0xa4>)
 8000f0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f8c <MX_TIM3_Init+0xa0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f14:	4b1d      	ldr	r3, [pc, #116]	@ (8000f8c <MX_TIM3_Init+0xa0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f8c <MX_TIM3_Init+0xa0>)
 8000f1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	@ (8000f8c <MX_TIM3_Init+0xa0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f28:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <MX_TIM3_Init+0xa0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f36:	2301      	movs	r3, #1
 8000f38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f46:	2301      	movs	r3, #1
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	4619      	mov	r1, r3
 8000f58:	480c      	ldr	r0, [pc, #48]	@ (8000f8c <MX_TIM3_Init+0xa0>)
 8000f5a:	f001 fd31 	bl	80029c0 <HAL_TIM_Encoder_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f64:	f7ff fce1 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_TIM3_Init+0xa0>)
 8000f76:	f002 fac9 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000f80:	f7ff fcd3 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	@ 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000007c 	.word	0x2000007c
 8000f90:	40000400 	.word	0x40000400

08000f94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	@ 0x30
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	2224      	movs	r2, #36	@ 0x24
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f002 fe2a 	bl	8003bfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fb0:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <MX_TIM4_Init+0xa0>)
 8000fb2:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <MX_TIM4_Init+0xa4>)
 8000fb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <MX_TIM4_Init+0xa0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <MX_TIM4_Init+0xa0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <MX_TIM4_Init+0xa0>)
 8000fc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fca:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_TIM4_Init+0xa0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd0:	4b18      	ldr	r3, [pc, #96]	@ (8001034 <MX_TIM4_Init+0xa0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	4619      	mov	r1, r3
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <MX_TIM4_Init+0xa0>)
 8001002:	f001 fcdd 	bl	80029c0 <HAL_TIM_Encoder_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800100c:	f7ff fc8d 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001014:	2300      	movs	r3, #0
 8001016:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	4619      	mov	r1, r3
 800101c:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_TIM4_Init+0xa0>)
 800101e:	f002 fa75 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001028:	f7ff fc7f 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	3730      	adds	r7, #48	@ 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200000c4 	.word	0x200000c4
 8001038:	40000800 	.word	0x40000800

0800103c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	@ 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2224      	movs	r2, #36	@ 0x24
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fdd6 	bl	8003bfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001058:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <MX_TIM5_Init+0xa0>)
 800105a:	4a21      	ldr	r2, [pc, #132]	@ (80010e0 <MX_TIM5_Init+0xa4>)
 800105c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800105e:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <MX_TIM5_Init+0xa0>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <MX_TIM5_Init+0xa0>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <MX_TIM5_Init+0xa0>)
 800106c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001070:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_TIM5_Init+0xa0>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_TIM5_Init+0xa0>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800107e:	2303      	movs	r3, #3
 8001080:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001086:	2301      	movs	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <MX_TIM5_Init+0xa0>)
 80010aa:	f001 fc89 	bl	80029c0 <HAL_TIM_Encoder_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80010b4:	f7ff fc39 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_TIM5_Init+0xa0>)
 80010c6:	f002 fa21 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80010d0:	f7ff fc2b 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3730      	adds	r7, #48	@ 0x30
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000010c 	.word	0x2000010c
 80010e0:	40000c00 	.word	0x40000c00

080010e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ea:	463b      	mov	r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <MX_TIM6_Init+0x64>)
 80010f4:	4a15      	ldr	r2, [pc, #84]	@ (800114c <MX_TIM6_Init+0x68>)
 80010f6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200-1;
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_TIM6_Init+0x64>)
 80010fa:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80010fe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_TIM6_Init+0x64>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <MX_TIM6_Init+0x64>)
 8001108:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800110c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_TIM6_Init+0x64>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <MX_TIM6_Init+0x64>)
 8001116:	f001 fa99 	bl	800264c <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001120:	f7ff fc03 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	@ (8001148 <MX_TIM6_Init+0x64>)
 8001132:	f002 f9eb 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800113c:	f7ff fbf5 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000154 	.word	0x20000154
 800114c:	40001000 	.word	0x40001000

08001150 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_TIM7_Init+0x64>)
 8001160:	4a15      	ldr	r2, [pc, #84]	@ (80011b8 <MX_TIM7_Init+0x68>)
 8001162:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001164:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <MX_TIM7_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_TIM7_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001170:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <MX_TIM7_Init+0x64>)
 8001172:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001176:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_TIM7_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800117e:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <MX_TIM7_Init+0x64>)
 8001180:	f001 fa64 	bl	800264c <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800118a:	f7ff fbce 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <MX_TIM7_Init+0x64>)
 800119c:	f002 f9b6 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80011a6:	f7ff fbc0 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000019c 	.word	0x2000019c
 80011b8:	40001400 	.word	0x40001400

080011bc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b096      	sub	sp, #88	@ 0x58
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	615a      	str	r2, [r3, #20]
 80011ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 fd01 	bl	8003bfc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011fa:	4b3f      	ldr	r3, [pc, #252]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 80011fc:	4a3f      	ldr	r2, [pc, #252]	@ (80012fc <MX_TIM8_Init+0x140>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 720-1;
 8001200:	4b3d      	ldr	r3, [pc, #244]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 8001202:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001206:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001208:	4b3b      	ldr	r3, [pc, #236]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2000-1;
 800120e:	4b3a      	ldr	r3, [pc, #232]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 8001210:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001214:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001216:	4b38      	ldr	r3, [pc, #224]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800121c:	4b36      	ldr	r3, [pc, #216]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001222:	4b35      	ldr	r3, [pc, #212]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001228:	4833      	ldr	r0, [pc, #204]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 800122a:	f001 fa0f 	bl	800264c <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001234:	f7ff fb79 	bl	800092a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800123e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001242:	4619      	mov	r1, r3
 8001244:	482c      	ldr	r0, [pc, #176]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 8001246:	f001 fdad 	bl	8002da4 <HAL_TIM_ConfigClockSource>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001250:	f7ff fb6b 	bl	800092a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001254:	4828      	ldr	r0, [pc, #160]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 8001256:	f001 faa1 	bl	800279c <HAL_TIM_PWM_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001260:	f7ff fb63 	bl	800092a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800126c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001270:	4619      	mov	r1, r3
 8001272:	4821      	ldr	r0, [pc, #132]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 8001274:	f002 f94a 	bl	800350c <HAL_TIMEx_MasterConfigSynchronization>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 800127e:	f7ff fb54 	bl	800092a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001282:	2360      	movs	r3, #96	@ 0x60
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1000-1;
 8001286:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001290:	2300      	movs	r3, #0
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a4:	2200      	movs	r2, #0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4813      	ldr	r0, [pc, #76]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 80012aa:	f001 fcb9 	bl	8002c20 <HAL_TIM_PWM_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM8_Init+0xfc>
  {
    Error_Handler();
 80012b4:	f7ff fb39 	bl	800092a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 80012dc:	f002 f982 	bl	80035e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80012e6:	f7ff fb20 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80012ea:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <MX_TIM8_Init+0x13c>)
 80012ec:	f000 f92e 	bl	800154c <HAL_TIM_MspPostInit>

}
 80012f0:	bf00      	nop
 80012f2:	3758      	adds	r7, #88	@ 0x58
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200001e4 	.word	0x200001e4
 80012fc:	40013400 	.word	0x40013400

08001300 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	@ 0x30
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0320 	add.w	r3, r7, #32
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a31      	ldr	r2, [pc, #196]	@ (80013e0 <HAL_TIM_Base_MspInit+0xe0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d125      	bne.n	800136c <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001320:	4b30      	ldr	r3, [pc, #192]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a2f      	ldr	r2, [pc, #188]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001326:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b2d      	ldr	r3, [pc, #180]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a29      	ldr	r2, [pc, #164]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001350:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2302      	movs	r3, #2
 800135c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0320 	add.w	r3, r7, #32
 8001362:	4619      	mov	r1, r3
 8001364:	4820      	ldr	r0, [pc, #128]	@ (80013e8 <HAL_TIM_Base_MspInit+0xe8>)
 8001366:	f000 fbb5 	bl	8001ad4 <HAL_GPIO_Init>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800136a:	e034      	b.n	80013d6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM6)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <HAL_TIM_Base_MspInit+0xec>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d10c      	bne.n	8001390 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a1a      	ldr	r2, [pc, #104]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
}
 800138e:	e022      	b.n	80013d6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a16      	ldr	r2, [pc, #88]	@ (80013f0 <HAL_TIM_Base_MspInit+0xf0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d10c      	bne.n	80013b4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	4a11      	ldr	r2, [pc, #68]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 80013a0:	f043 0320 	orr.w	r3, r3, #32
 80013a4:	61d3      	str	r3, [r2, #28]
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 80013a8:	69db      	ldr	r3, [r3, #28]
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
}
 80013b2:	e010      	b.n	80013d6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM8)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <HAL_TIM_Base_MspInit+0xf4>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10b      	bne.n	80013d6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 80013c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013c8:	6193      	str	r3, [r2, #24]
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_TIM_Base_MspInit+0xe4>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	bf00      	nop
 80013d8:	3730      	adds	r7, #48	@ 0x30
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40012c00 	.word	0x40012c00
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010800 	.word	0x40010800
 80013ec:	40001000 	.word	0x40001000
 80013f0:	40001400 	.word	0x40001400
 80013f4:	40013400 	.word	0x40013400

080013f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	@ 0x38
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM3)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a47      	ldr	r2, [pc, #284]	@ (8001530 <HAL_TIM_Encoder_MspInit+0x138>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d124      	bne.n	8001462 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001418:	4b46      	ldr	r3, [pc, #280]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	4a45      	ldr	r2, [pc, #276]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	61d3      	str	r3, [r2, #28]
 8001424:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	623b      	str	r3, [r7, #32]
 800142e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b40      	ldr	r3, [pc, #256]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a3f      	ldr	r2, [pc, #252]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001448:	23c0      	movs	r3, #192	@ 0xc0
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	4837      	ldr	r0, [pc, #220]	@ (8001538 <HAL_TIM_Encoder_MspInit+0x140>)
 800145c:	f000 fb3a 	bl	8001ad4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001460:	e061      	b.n	8001526 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(tim_encoderHandle->Instance==TIM4)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a35      	ldr	r2, [pc, #212]	@ (800153c <HAL_TIM_Encoder_MspInit+0x144>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d133      	bne.n	80014d4 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800146c:	4b31      	ldr	r3, [pc, #196]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	4a30      	ldr	r2, [pc, #192]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	61d3      	str	r3, [r2, #28]
 8001478:	4b2e      	ldr	r3, [pc, #184]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001484:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a2a      	ldr	r2, [pc, #168]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 800148a:	f043 0320 	orr.w	r3, r3, #32
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b28      	ldr	r3, [pc, #160]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0320 	and.w	r3, r3, #32
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800149c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ae:	4619      	mov	r1, r3
 80014b0:	4823      	ldr	r0, [pc, #140]	@ (8001540 <HAL_TIM_Encoder_MspInit+0x148>)
 80014b2:	f000 fb0f 	bl	8001ad4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM4_ENABLE();
 80014b6:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <HAL_TIM_Encoder_MspInit+0x14c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80014bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014be:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80014c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80014c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80014cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001544 <HAL_TIM_Encoder_MspInit+0x14c>)
 80014ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014d0:	6053      	str	r3, [r2, #4]
}
 80014d2:	e028      	b.n	8001526 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(tim_encoderHandle->Instance==TIM5)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001548 <HAL_TIM_Encoder_MspInit+0x150>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d123      	bne.n	8001526 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014de:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	6193      	str	r3, [r2, #24]
 8001502:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 0304 	and.w	r3, r3, #4
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800150e:	2303      	movs	r3, #3
 8001510:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <HAL_TIM_Encoder_MspInit+0x140>)
 8001522:	f000 fad7 	bl	8001ad4 <HAL_GPIO_Init>
}
 8001526:	bf00      	nop
 8001528:	3738      	adds	r7, #56	@ 0x38
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40000400 	.word	0x40000400
 8001534:	40021000 	.word	0x40021000
 8001538:	40010800 	.word	0x40010800
 800153c:	40000800 	.word	0x40000800
 8001540:	40011400 	.word	0x40011400
 8001544:	40010000 	.word	0x40010000
 8001548:	40000c00 	.word	0x40000c00

0800154c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a1f      	ldr	r2, [pc, #124]	@ (80015e4 <HAL_TIM_MspPostInit+0x98>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d119      	bne.n	80015a0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <HAL_TIM_MspPostInit+0x9c>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a1d      	ldr	r2, [pc, #116]	@ (80015e8 <HAL_TIM_MspPostInit+0x9c>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b1b      	ldr	r3, [pc, #108]	@ (80015e8 <HAL_TIM_MspPostInit+0x9c>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001584:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001588:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2302      	movs	r3, #2
 8001590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4619      	mov	r1, r3
 8001598:	4814      	ldr	r0, [pc, #80]	@ (80015ec <HAL_TIM_MspPostInit+0xa0>)
 800159a:	f000 fa9b 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800159e:	e01c      	b.n	80015da <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM8)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <HAL_TIM_MspPostInit+0xa4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d117      	bne.n	80015da <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015aa:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <HAL_TIM_MspPostInit+0x9c>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <HAL_TIM_MspPostInit+0x9c>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	6193      	str	r3, [r2, #24]
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <HAL_TIM_MspPostInit+0x9c>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015c2:	2340      	movs	r3, #64	@ 0x40
 80015c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2302      	movs	r3, #2
 80015cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4619      	mov	r1, r3
 80015d4:	4807      	ldr	r0, [pc, #28]	@ (80015f4 <HAL_TIM_MspPostInit+0xa8>)
 80015d6:	f000 fa7d 	bl	8001ad4 <HAL_GPIO_Init>
}
 80015da:	bf00      	nop
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40012c00 	.word	0x40012c00
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010800 	.word	0x40010800
 80015f0:	40013400 	.word	0x40013400
 80015f4:	40011000 	.word	0x40011000

080015f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <MX_USART1_UART_Init+0x4c>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <MX_USART1_UART_Init+0x50>)
 8001600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <MX_USART1_UART_Init+0x4c>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <MX_USART1_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <MX_USART1_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <MX_USART1_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <MX_USART1_UART_Init+0x4c>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <MX_USART1_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <MX_USART1_UART_Init+0x4c>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	@ (8001644 <MX_USART1_UART_Init+0x4c>)
 8001630:	f002 f829 	bl	8003686 <HAL_UART_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800163a:	f7ff f976 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000022c 	.word	0x2000022c
 8001648:	40013800 	.word	0x40013800

0800164c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001650:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_USART3_UART_Init+0x4c>)
 8001652:	4a12      	ldr	r2, [pc, #72]	@ (800169c <MX_USART3_UART_Init+0x50>)
 8001654:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <MX_USART3_UART_Init+0x4c>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_USART3_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_USART3_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <MX_USART3_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_USART3_UART_Init+0x4c>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <MX_USART3_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_USART3_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_USART3_UART_Init+0x4c>)
 8001684:	f001 ffff 	bl	8003686 <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800168e:	f7ff f94c 	bl	800092a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000274 	.word	0x20000274
 800169c:	40004800 	.word	0x40004800

080016a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	@ 0x30
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a3e      	ldr	r2, [pc, #248]	@ (80017b4 <HAL_UART_MspInit+0x114>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d13e      	bne.n	800173e <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c0:	4b3d      	ldr	r3, [pc, #244]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a3c      	ldr	r2, [pc, #240]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 80016c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b3a      	ldr	r3, [pc, #232]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d8:	4b37      	ldr	r3, [pc, #220]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a36      	ldr	r2, [pc, #216]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b34      	ldr	r3, [pc, #208]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016f0:	2340      	movs	r3, #64	@ 0x40
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	482e      	ldr	r0, [pc, #184]	@ (80017bc <HAL_UART_MspInit+0x11c>)
 8001704:	f000 f9e6 	bl	8001ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	4619      	mov	r1, r3
 800171a:	4828      	ldr	r0, [pc, #160]	@ (80017bc <HAL_UART_MspInit+0x11c>)
 800171c:	f000 f9da 	bl	8001ad4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001720:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <HAL_UART_MspInit+0x120>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001728:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800172c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800172e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001736:	4a22      	ldr	r2, [pc, #136]	@ (80017c0 <HAL_UART_MspInit+0x120>)
 8001738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173a:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800173c:	e036      	b.n	80017ac <HAL_UART_MspInit+0x10c>
  else if(uartHandle->Instance==USART3)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a20      	ldr	r2, [pc, #128]	@ (80017c4 <HAL_UART_MspInit+0x124>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d131      	bne.n	80017ac <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	4a1a      	ldr	r2, [pc, #104]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 800174e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001752:	61d3      	str	r3, [r2, #28]
 8001754:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 8001756:	69db      	ldr	r3, [r3, #28]
 8001758:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a14      	ldr	r2, [pc, #80]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <HAL_UART_MspInit+0x118>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001778:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	480b      	ldr	r0, [pc, #44]	@ (80017bc <HAL_UART_MspInit+0x11c>)
 800178e:	f000 f9a1 	bl	8001ad4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001792:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4619      	mov	r1, r3
 80017a6:	4805      	ldr	r0, [pc, #20]	@ (80017bc <HAL_UART_MspInit+0x11c>)
 80017a8:	f000 f994 	bl	8001ad4 <HAL_GPIO_Init>
}
 80017ac:	bf00      	nop
 80017ae:	3730      	adds	r7, #48	@ 0x30
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40010c00 	.word	0x40010c00
 80017c0:	40010000 	.word	0x40010000
 80017c4:	40004800 	.word	0x40004800

080017c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c8:	f7ff fac8 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017cc:	480b      	ldr	r0, [pc, #44]	@ (80017fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ce:	490c      	ldr	r1, [pc, #48]	@ (8001800 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001804 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a09      	ldr	r2, [pc, #36]	@ (8001808 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017e4:	4c09      	ldr	r4, [pc, #36]	@ (800180c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017f2:	f002 fa0b 	bl	8003c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017f6:	f7fe fe87 	bl	8000508 <main>
  bx lr
 80017fa:	4770      	bx	lr
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001804:	08003cb0 	.word	0x08003cb0
  ldr r2, =_sbss
 8001808:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800180c:	200002c0 	.word	0x200002c0

08001810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC1_2_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_Init+0x28>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a07      	ldr	r2, [pc, #28]	@ (800183c <HAL_Init+0x28>)
 800181e:	f043 0310 	orr.w	r3, r3, #16
 8001822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 f91d 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182a:	200f      	movs	r0, #15
 800182c:	f000 f808 	bl	8001840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001830:	f7ff fa36 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40022000 	.word	0x40022000

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_InitTick+0x54>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_InitTick+0x58>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001856:	fbb3 f3f1 	udiv	r3, r3, r1
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 f92b 	bl	8001aba <HAL_SYSTICK_Config>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00e      	b.n	800188c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d80a      	bhi.n	800188a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f000 f8fd 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001880:	4a06      	ldr	r2, [pc, #24]	@ (800189c <HAL_InitTick+0x5c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000000 	.word	0x20000000
 8001898:	20000008 	.word	0x20000008
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_IncTick+0x1c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <HAL_IncTick+0x20>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a03      	ldr	r2, [pc, #12]	@ (80018c0 <HAL_IncTick+0x20>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	20000008 	.word	0x20000008
 80018c0:	200002bc 	.word	0x200002bc

080018c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b02      	ldr	r3, [pc, #8]	@ (80018d4 <HAL_GetTick+0x10>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	200002bc 	.word	0x200002bc

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	@ (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db0a      	blt.n	8001966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	490c      	ldr	r1, [pc, #48]	@ (8001988 <__NVIC_SetPriority+0x4c>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	440b      	add	r3, r1
 8001960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001964:	e00a      	b.n	800197c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4908      	ldr	r1, [pc, #32]	@ (800198c <__NVIC_SetPriority+0x50>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	3b04      	subs	r3, #4
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	440b      	add	r3, r1
 800197a:	761a      	strb	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	@ 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f1c3 0307 	rsb	r3, r3, #7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf28      	it	cs
 80019ae:	2304      	movcs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3304      	adds	r3, #4
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d902      	bls.n	80019c0 <NVIC_EncodePriority+0x30>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b03      	subs	r3, #3
 80019be:	e000      	b.n	80019c2 <NVIC_EncodePriority+0x32>
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	401a      	ands	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43d9      	mvns	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	4313      	orrs	r3, r2
         );
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	@ 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019f8:	f3bf 8f4f 	dsb	sy
}
 80019fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <__NVIC_SystemReset+0x24>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001a06:	4904      	ldr	r1, [pc, #16]	@ (8001a18 <__NVIC_SystemReset+0x24>)
 8001a08:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <__NVIC_SystemReset+0x28>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a0e:	f3bf 8f4f 	dsb	sy
}
 8001a12:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <__NVIC_SystemReset+0x20>
 8001a18:	e000ed00 	.word	0xe000ed00
 8001a1c:	05fa0004 	.word	0x05fa0004

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff7a 	bl	800193c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff33 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff48 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff7a 	bl	8001990 <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff49 	bl	800193c <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001ab6:	f7ff ff9d 	bl	80019f4 <__NVIC_SystemReset>

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffac 	bl	8001a20 <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b08b      	sub	sp, #44	@ 0x2c
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae6:	e179      	b.n	8001ddc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	f040 8168 	bne.w	8001dd6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4a96      	ldr	r2, [pc, #600]	@ (8001d64 <HAL_GPIO_Init+0x290>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d05e      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b10:	4a94      	ldr	r2, [pc, #592]	@ (8001d64 <HAL_GPIO_Init+0x290>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d875      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b16:	4a94      	ldr	r2, [pc, #592]	@ (8001d68 <HAL_GPIO_Init+0x294>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d058      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b1c:	4a92      	ldr	r2, [pc, #584]	@ (8001d68 <HAL_GPIO_Init+0x294>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d86f      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b22:	4a92      	ldr	r2, [pc, #584]	@ (8001d6c <HAL_GPIO_Init+0x298>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d052      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b28:	4a90      	ldr	r2, [pc, #576]	@ (8001d6c <HAL_GPIO_Init+0x298>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d869      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b2e:	4a90      	ldr	r2, [pc, #576]	@ (8001d70 <HAL_GPIO_Init+0x29c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d04c      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b34:	4a8e      	ldr	r2, [pc, #568]	@ (8001d70 <HAL_GPIO_Init+0x29c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d863      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b3a:	4a8e      	ldr	r2, [pc, #568]	@ (8001d74 <HAL_GPIO_Init+0x2a0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d046      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
 8001b40:	4a8c      	ldr	r2, [pc, #560]	@ (8001d74 <HAL_GPIO_Init+0x2a0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d85d      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b46:	2b12      	cmp	r3, #18
 8001b48:	d82a      	bhi.n	8001ba0 <HAL_GPIO_Init+0xcc>
 8001b4a:	2b12      	cmp	r3, #18
 8001b4c:	d859      	bhi.n	8001c02 <HAL_GPIO_Init+0x12e>
 8001b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b54 <HAL_GPIO_Init+0x80>)
 8001b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b54:	08001bcf 	.word	0x08001bcf
 8001b58:	08001ba9 	.word	0x08001ba9
 8001b5c:	08001bbb 	.word	0x08001bbb
 8001b60:	08001bfd 	.word	0x08001bfd
 8001b64:	08001c03 	.word	0x08001c03
 8001b68:	08001c03 	.word	0x08001c03
 8001b6c:	08001c03 	.word	0x08001c03
 8001b70:	08001c03 	.word	0x08001c03
 8001b74:	08001c03 	.word	0x08001c03
 8001b78:	08001c03 	.word	0x08001c03
 8001b7c:	08001c03 	.word	0x08001c03
 8001b80:	08001c03 	.word	0x08001c03
 8001b84:	08001c03 	.word	0x08001c03
 8001b88:	08001c03 	.word	0x08001c03
 8001b8c:	08001c03 	.word	0x08001c03
 8001b90:	08001c03 	.word	0x08001c03
 8001b94:	08001c03 	.word	0x08001c03
 8001b98:	08001bb1 	.word	0x08001bb1
 8001b9c:	08001bc5 	.word	0x08001bc5
 8001ba0:	4a75      	ldr	r2, [pc, #468]	@ (8001d78 <HAL_GPIO_Init+0x2a4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ba6:	e02c      	b.n	8001c02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	623b      	str	r3, [r7, #32]
          break;
 8001bae:	e029      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e024      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e01f      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e01a      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e013      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be4:	2308      	movs	r3, #8
 8001be6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	611a      	str	r2, [r3, #16]
          break;
 8001bee:	e009      	b.n	8001c04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	615a      	str	r2, [r3, #20]
          break;
 8001bfa:	e003      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x130>
          break;
 8001c02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	2bff      	cmp	r3, #255	@ 0xff
 8001c08:	d801      	bhi.n	8001c0e <HAL_GPIO_Init+0x13a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	e001      	b.n	8001c12 <HAL_GPIO_Init+0x13e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3304      	adds	r3, #4
 8001c12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	2bff      	cmp	r3, #255	@ 0xff
 8001c18:	d802      	bhi.n	8001c20 <HAL_GPIO_Init+0x14c>
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x152>
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	3b08      	subs	r3, #8
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	401a      	ands	r2, r3
 8001c38:	6a39      	ldr	r1, [r7, #32]
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	431a      	orrs	r2, r3
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80c1 	beq.w	8001dd6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c54:	4b49      	ldr	r3, [pc, #292]	@ (8001d7c <HAL_GPIO_Init+0x2a8>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a48      	ldr	r2, [pc, #288]	@ (8001d7c <HAL_GPIO_Init+0x2a8>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b46      	ldr	r3, [pc, #280]	@ (8001d7c <HAL_GPIO_Init+0x2a8>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c6c:	4a44      	ldr	r2, [pc, #272]	@ (8001d80 <HAL_GPIO_Init+0x2ac>)
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a3c      	ldr	r2, [pc, #240]	@ (8001d84 <HAL_GPIO_Init+0x2b0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d01f      	beq.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d88 <HAL_GPIO_Init+0x2b4>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d019      	beq.n	8001cd4 <HAL_GPIO_Init+0x200>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3a      	ldr	r2, [pc, #232]	@ (8001d8c <HAL_GPIO_Init+0x2b8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d013      	beq.n	8001cd0 <HAL_GPIO_Init+0x1fc>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a39      	ldr	r2, [pc, #228]	@ (8001d90 <HAL_GPIO_Init+0x2bc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d00d      	beq.n	8001ccc <HAL_GPIO_Init+0x1f8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a38      	ldr	r2, [pc, #224]	@ (8001d94 <HAL_GPIO_Init+0x2c0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d007      	beq.n	8001cc8 <HAL_GPIO_Init+0x1f4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a37      	ldr	r2, [pc, #220]	@ (8001d98 <HAL_GPIO_Init+0x2c4>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_GPIO_Init+0x1f0>
 8001cc0:	2305      	movs	r3, #5
 8001cc2:	e00a      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001cc4:	2306      	movs	r3, #6
 8001cc6:	e008      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001cc8:	2304      	movs	r3, #4
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e004      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_GPIO_Init+0x206>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cdc:	f002 0203 	and.w	r2, r2, #3
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	4093      	lsls	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cea:	4925      	ldr	r1, [pc, #148]	@ (8001d80 <HAL_GPIO_Init+0x2ac>)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d04:	4b25      	ldr	r3, [pc, #148]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	4924      	ldr	r1, [pc, #144]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d12:	4b22      	ldr	r3, [pc, #136]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4920      	ldr	r1, [pc, #128]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	491a      	ldr	r1, [pc, #104]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60cb      	str	r3, [r1, #12]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	4916      	ldr	r1, [pc, #88]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d025      	beq.n	8001da0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4910      	ldr	r1, [pc, #64]	@ (8001d9c <HAL_GPIO_Init+0x2c8>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
 8001d60:	e025      	b.n	8001dae <HAL_GPIO_Init+0x2da>
 8001d62:	bf00      	nop
 8001d64:	10320000 	.word	0x10320000
 8001d68:	10310000 	.word	0x10310000
 8001d6c:	10220000 	.word	0x10220000
 8001d70:	10210000 	.word	0x10210000
 8001d74:	10120000 	.word	0x10120000
 8001d78:	10110000 	.word	0x10110000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	40010800 	.word	0x40010800
 8001d88:	40010c00 	.word	0x40010c00
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40011400 	.word	0x40011400
 8001d94:	40011800 	.word	0x40011800
 8001d98:	40011c00 	.word	0x40011c00
 8001d9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001da0:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4913      	ldr	r1, [pc, #76]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d006      	beq.n	8001dc8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dba:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	490e      	ldr	r1, [pc, #56]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
 8001dc6:	e006      	b.n	8001dd6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	4909      	ldr	r1, [pc, #36]	@ (8001df8 <HAL_GPIO_Init+0x324>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	3301      	adds	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f47f ae7e 	bne.w	8001ae8 <HAL_GPIO_Init+0x14>
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	372c      	adds	r7, #44	@ 0x2c
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40010400 	.word	0x40010400

08001dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e0c:	787b      	ldrb	r3, [r7, #1]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e12:	887a      	ldrh	r2, [r7, #2]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e18:	e003      	b.n	8001e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	041a      	lsls	r2, r3, #16
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	611a      	str	r2, [r3, #16]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e272      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8087 	beq.w	8001f5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e4c:	4b92      	ldr	r3, [pc, #584]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d00c      	beq.n	8001e72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e58:	4b8f      	ldr	r3, [pc, #572]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d112      	bne.n	8001e8a <HAL_RCC_OscConfig+0x5e>
 8001e64:	4b8c      	ldr	r3, [pc, #560]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e70:	d10b      	bne.n	8001e8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e72:	4b89      	ldr	r3, [pc, #548]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d06c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x12c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d168      	bne.n	8001f58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e24c      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x76>
 8001e94:	4b80      	ldr	r3, [pc, #512]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a7f      	ldr	r2, [pc, #508]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e02e      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x98>
 8001eaa:	4b7b      	ldr	r3, [pc, #492]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7a      	ldr	r2, [pc, #488]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b78      	ldr	r3, [pc, #480]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a77      	ldr	r2, [pc, #476]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01d      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xbc>
 8001ece:	4b72      	ldr	r3, [pc, #456]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a71      	ldr	r2, [pc, #452]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b6f      	ldr	r3, [pc, #444]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6e      	ldr	r2, [pc, #440]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ee8:	4b6b      	ldr	r3, [pc, #428]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a6a      	ldr	r2, [pc, #424]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b68      	ldr	r3, [pc, #416]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a67      	ldr	r2, [pc, #412]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fcdc 	bl	80018c4 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fcd8 	bl	80018c4 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	@ 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e200      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b5d      	ldr	r3, [pc, #372]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0xe4>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fcc8 	bl	80018c4 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fcc4 	bl	80018c4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	@ 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1ec      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b53      	ldr	r3, [pc, #332]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x10c>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d063      	beq.n	800202e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f66:	4b4c      	ldr	r3, [pc, #304]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f72:	4b49      	ldr	r3, [pc, #292]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x18c>
 8001f7e:	4b46      	ldr	r3, [pc, #280]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	4b43      	ldr	r3, [pc, #268]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x176>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1c0      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4939      	ldr	r1, [pc, #228]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	e03a      	b.n	800202e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc0:	4b36      	ldr	r3, [pc, #216]	@ (800209c <HAL_RCC_OscConfig+0x270>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fc7d 	bl	80018c4 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff fc79 	bl	80018c4 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1a1      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4927      	ldr	r1, [pc, #156]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002002:	4b26      	ldr	r3, [pc, #152]	@ (800209c <HAL_RCC_OscConfig+0x270>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7ff fc5c 	bl	80018c4 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002010:	f7ff fc58 	bl	80018c4 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e180      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03a      	beq.n	80020b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d019      	beq.n	8002076 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	4b17      	ldr	r3, [pc, #92]	@ (80020a0 <HAL_RCC_OscConfig+0x274>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7ff fc3c 	bl	80018c4 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff fc38 	bl	80018c4 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e160      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <HAL_RCC_OscConfig+0x26c>)
 8002064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800206e:	2001      	movs	r0, #1
 8002070:	f000 face 	bl	8002610 <RCC_Delay>
 8002074:	e01c      	b.n	80020b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002076:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <HAL_RCC_OscConfig+0x274>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7ff fc22 	bl	80018c4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002082:	e00f      	b.n	80020a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fc1e 	bl	80018c4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d908      	bls.n	80020a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e146      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	42420000 	.word	0x42420000
 80020a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	4b92      	ldr	r3, [pc, #584]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e9      	bne.n	8002084 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80a6 	beq.w	800220a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b8b      	ldr	r3, [pc, #556]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10d      	bne.n	80020ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b88      	ldr	r3, [pc, #544]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4a87      	ldr	r2, [pc, #540]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	61d3      	str	r3, [r2, #28]
 80020da:	4b85      	ldr	r3, [pc, #532]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b82      	ldr	r3, [pc, #520]	@ (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f6:	4b7f      	ldr	r3, [pc, #508]	@ (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7e      	ldr	r2, [pc, #504]	@ (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7ff fbdf 	bl	80018c4 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7ff fbdb 	bl	80018c4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b64      	cmp	r3, #100	@ 0x64
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e103      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	4b75      	ldr	r3, [pc, #468]	@ (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x312>
 8002130:	4b6f      	ldr	r3, [pc, #444]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a6e      	ldr	r2, [pc, #440]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	e02d      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x334>
 8002146:	4b6a      	ldr	r3, [pc, #424]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a69      	ldr	r2, [pc, #420]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	4b67      	ldr	r3, [pc, #412]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a66      	ldr	r2, [pc, #408]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	e01c      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x356>
 8002168:	4b61      	ldr	r3, [pc, #388]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a60      	ldr	r2, [pc, #384]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	4b5e      	ldr	r3, [pc, #376]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a5d      	ldr	r2, [pc, #372]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	e00b      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 8002182:	4b5b      	ldr	r3, [pc, #364]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a5a      	ldr	r2, [pc, #360]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6213      	str	r3, [r2, #32]
 800218e:	4b58      	ldr	r3, [pc, #352]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a57      	ldr	r2, [pc, #348]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7ff fb8f 	bl	80018c4 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7ff fb8b 	bl	80018c4 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0b1      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	4b4b      	ldr	r3, [pc, #300]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ee      	beq.n	80021aa <HAL_RCC_OscConfig+0x37e>
 80021cc:	e014      	b.n	80021f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fb79 	bl	80018c4 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff fb75 	bl	80018c4 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e09b      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ec:	4b40      	ldr	r3, [pc, #256]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1ee      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d105      	bne.n	800220a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fe:	4b3c      	ldr	r3, [pc, #240]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a3b      	ldr	r2, [pc, #236]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002208:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8087 	beq.w	8002322 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002214:	4b36      	ldr	r3, [pc, #216]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d061      	beq.n	80022e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d146      	bne.n	80022b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002228:	4b33      	ldr	r3, [pc, #204]	@ (80022f8 <HAL_RCC_OscConfig+0x4cc>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff fb49 	bl	80018c4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7ff fb45 	bl	80018c4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e06d      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002248:	4b29      	ldr	r3, [pc, #164]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800225c:	d108      	bne.n	8002270 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800225e:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4921      	ldr	r1, [pc, #132]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002270:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a19      	ldr	r1, [r3, #32]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	430b      	orrs	r3, r1
 8002282:	491b      	ldr	r1, [pc, #108]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_RCC_OscConfig+0x4cc>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7ff fb19 	bl	80018c4 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002296:	f7ff fb15 	bl	80018c4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e03d      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x46a>
 80022b4:	e035      	b.n	8002322 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <HAL_RCC_OscConfig+0x4cc>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fb02 	bl	80018c4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff fafe 	bl	80018c4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e026      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x498>
 80022e2:	e01e      	b.n	8002322 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e019      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_RCC_OscConfig+0x500>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	429a      	cmp	r2, r3
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0d0      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b6a      	ldr	r3, [pc, #424]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d910      	bls.n	8002374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b67      	ldr	r3, [pc, #412]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 0207 	bic.w	r2, r3, #7
 800235a:	4965      	ldr	r1, [pc, #404]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b63      	ldr	r3, [pc, #396]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0b8      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800238c:	4b59      	ldr	r3, [pc, #356]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a58      	ldr	r2, [pc, #352]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002396:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a4:	4b53      	ldr	r3, [pc, #332]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a52      	ldr	r2, [pc, #328]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b0:	4b50      	ldr	r3, [pc, #320]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	494d      	ldr	r1, [pc, #308]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d040      	beq.n	8002450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	4b47      	ldr	r3, [pc, #284]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d115      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e07f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	4b41      	ldr	r3, [pc, #260]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e073      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b3d      	ldr	r3, [pc, #244]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e06b      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b39      	ldr	r3, [pc, #228]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4936      	ldr	r1, [pc, #216]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002420:	f7ff fa50 	bl	80018c4 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	e00a      	b.n	800243e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002428:	f7ff fa4c 	bl	80018c4 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e053      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b2d      	ldr	r3, [pc, #180]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 020c 	and.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1eb      	bne.n	8002428 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b27      	ldr	r3, [pc, #156]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d210      	bcs.n	8002480 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b24      	ldr	r3, [pc, #144]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 0207 	bic.w	r2, r3, #7
 8002466:	4922      	ldr	r1, [pc, #136]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b20      	ldr	r3, [pc, #128]	@ (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e032      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800248c:	4b19      	ldr	r3, [pc, #100]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4916      	ldr	r1, [pc, #88]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024aa:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	490e      	ldr	r1, [pc, #56]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024be:	f000 f821 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	490a      	ldr	r1, [pc, #40]	@ (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	5ccb      	ldrb	r3, [r1, r3]
 80024d2:	fa22 f303 	lsr.w	r3, r2, r3
 80024d6:	4a09      	ldr	r2, [pc, #36]	@ (80024fc <HAL_RCC_ClockConfig+0x1cc>)
 80024d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024da:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <HAL_RCC_ClockConfig+0x1d0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff f9ae 	bl	8001840 <HAL_InitTick>

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08003c7c 	.word	0x08003c7c
 80024fc:	20000000 	.word	0x20000000
 8002500:	20000004 	.word	0x20000004

08002504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800251e:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x94>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b04      	cmp	r3, #4
 800252c:	d002      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x30>
 800252e:	2b08      	cmp	r3, #8
 8002530:	d003      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x36>
 8002532:	e027      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002534:	4b19      	ldr	r3, [pc, #100]	@ (800259c <HAL_RCC_GetSysClockFreq+0x98>)
 8002536:	613b      	str	r3, [r7, #16]
      break;
 8002538:	e027      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	0c9b      	lsrs	r3, r3, #18
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	4a17      	ldr	r2, [pc, #92]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002544:	5cd3      	ldrb	r3, [r2, r3]
 8002546:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x94>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	0c5b      	lsrs	r3, r3, #17
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	4a11      	ldr	r2, [pc, #68]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800255e:	5cd3      	ldrb	r3, [r2, r3]
 8002560:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <HAL_RCC_GetSysClockFreq+0x98>)
 8002566:	fb03 f202 	mul.w	r2, r3, r2
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e004      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a0c      	ldr	r2, [pc, #48]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	613b      	str	r3, [r7, #16]
      break;
 8002582:	e002      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <HAL_RCC_GetSysClockFreq+0x98>)
 8002586:	613b      	str	r3, [r7, #16]
      break;
 8002588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800258a:	693b      	ldr	r3, [r7, #16]
}
 800258c:	4618      	mov	r0, r3
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	007a1200 	.word	0x007a1200
 80025a0:	08003c94 	.word	0x08003c94
 80025a4:	08003ca4 	.word	0x08003ca4
 80025a8:	003d0900 	.word	0x003d0900

080025ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b02      	ldr	r3, [pc, #8]	@ (80025bc <HAL_RCC_GetHCLKFreq+0x10>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	20000000 	.word	0x20000000

080025c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c4:	f7ff fff2 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4903      	ldr	r1, [pc, #12]	@ (80025e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08003c8c 	.word	0x08003c8c

080025e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025ec:	f7ff ffde 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	@ (8002608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	0adb      	lsrs	r3, r3, #11
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4903      	ldr	r1, [pc, #12]	@ (800260c <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	08003c8c 	.word	0x08003c8c

08002610 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002618:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <RCC_Delay+0x34>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0a      	ldr	r2, [pc, #40]	@ (8002648 <RCC_Delay+0x38>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0a5b      	lsrs	r3, r3, #9
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800262c:	bf00      	nop
  }
  while (Delay --);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1e5a      	subs	r2, r3, #1
 8002632:	60fa      	str	r2, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <RCC_Delay+0x1c>
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	20000000 	.word	0x20000000
 8002648:	10624dd3 	.word	0x10624dd3

0800264c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e041      	b.n	80026e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe fe44 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3304      	adds	r3, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4610      	mov	r0, r2
 800268c:	f000 fc52 	bl	8002f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d001      	beq.n	8002704 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e03c      	b.n	800277e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1d      	ldr	r2, [pc, #116]	@ (8002788 <HAL_TIM_Base_Start+0x9c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d018      	beq.n	8002748 <HAL_TIM_Base_Start+0x5c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <HAL_TIM_Base_Start+0xa0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d013      	beq.n	8002748 <HAL_TIM_Base_Start+0x5c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002728:	d00e      	beq.n	8002748 <HAL_TIM_Base_Start+0x5c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a18      	ldr	r2, [pc, #96]	@ (8002790 <HAL_TIM_Base_Start+0xa4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_TIM_Base_Start+0x5c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a16      	ldr	r2, [pc, #88]	@ (8002794 <HAL_TIM_Base_Start+0xa8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_TIM_Base_Start+0x5c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a15      	ldr	r2, [pc, #84]	@ (8002798 <HAL_TIM_Base_Start+0xac>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d111      	bne.n	800276c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b06      	cmp	r3, #6
 8002758:	d010      	beq.n	800277c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800276a:	e007      	b.n	800277c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40013400 	.word	0x40013400
 8002790:	40000400 	.word	0x40000400
 8002794:	40000800 	.word	0x40000800
 8002798:	40000c00 	.word	0x40000c00

0800279c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e041      	b.n	8002832 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d106      	bne.n	80027c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f839 	bl	800283a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	4619      	mov	r1, r3
 80027da:	4610      	mov	r0, r2
 80027dc:	f000 fbaa 	bl	8002f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <HAL_TIM_PWM_Start+0x24>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b01      	cmp	r3, #1
 8002866:	bf14      	ite	ne
 8002868:	2301      	movne	r3, #1
 800286a:	2300      	moveq	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e022      	b.n	80028b6 <HAL_TIM_PWM_Start+0x6a>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b04      	cmp	r3, #4
 8002874:	d109      	bne.n	800288a <HAL_TIM_PWM_Start+0x3e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b01      	cmp	r3, #1
 8002880:	bf14      	ite	ne
 8002882:	2301      	movne	r3, #1
 8002884:	2300      	moveq	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	e015      	b.n	80028b6 <HAL_TIM_PWM_Start+0x6a>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d109      	bne.n	80028a4 <HAL_TIM_PWM_Start+0x58>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	bf14      	ite	ne
 800289c:	2301      	movne	r3, #1
 800289e:	2300      	moveq	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e008      	b.n	80028b6 <HAL_TIM_PWM_Start+0x6a>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	bf14      	ite	ne
 80028b0:	2301      	movne	r3, #1
 80028b2:	2300      	moveq	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e072      	b.n	80029a4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d104      	bne.n	80028ce <HAL_TIM_PWM_Start+0x82>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028cc:	e013      	b.n	80028f6 <HAL_TIM_PWM_Start+0xaa>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d104      	bne.n	80028de <HAL_TIM_PWM_Start+0x92>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028dc:	e00b      	b.n	80028f6 <HAL_TIM_PWM_Start+0xaa>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d104      	bne.n	80028ee <HAL_TIM_PWM_Start+0xa2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028ec:	e003      	b.n	80028f6 <HAL_TIM_PWM_Start+0xaa>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2202      	movs	r2, #2
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2201      	movs	r2, #1
 80028fc:	6839      	ldr	r1, [r7, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fde0 	bl	80034c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <HAL_TIM_PWM_Start+0x160>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d004      	beq.n	8002918 <HAL_TIM_PWM_Start+0xcc>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a27      	ldr	r2, [pc, #156]	@ (80029b0 <HAL_TIM_PWM_Start+0x164>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_TIM_PWM_Start+0xd0>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_TIM_PWM_Start+0xd2>
 800291c:	2300      	movs	r3, #0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002930:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1d      	ldr	r2, [pc, #116]	@ (80029ac <HAL_TIM_PWM_Start+0x160>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d018      	beq.n	800296e <HAL_TIM_PWM_Start+0x122>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1b      	ldr	r2, [pc, #108]	@ (80029b0 <HAL_TIM_PWM_Start+0x164>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <HAL_TIM_PWM_Start+0x122>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294e:	d00e      	beq.n	800296e <HAL_TIM_PWM_Start+0x122>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a17      	ldr	r2, [pc, #92]	@ (80029b4 <HAL_TIM_PWM_Start+0x168>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d009      	beq.n	800296e <HAL_TIM_PWM_Start+0x122>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a16      	ldr	r2, [pc, #88]	@ (80029b8 <HAL_TIM_PWM_Start+0x16c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d004      	beq.n	800296e <HAL_TIM_PWM_Start+0x122>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a14      	ldr	r2, [pc, #80]	@ (80029bc <HAL_TIM_PWM_Start+0x170>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d111      	bne.n	8002992 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b06      	cmp	r3, #6
 800297e:	d010      	beq.n	80029a2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002990:	e007      	b.n	80029a2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40013400 	.word	0x40013400
 80029b4:	40000400 	.word	0x40000400
 80029b8:	40000800 	.word	0x40000800
 80029bc:	40000c00 	.word	0x40000c00

080029c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e093      	b.n	8002afc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d106      	bne.n	80029ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fe fd05 	bl	80013f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a04:	f023 0307 	bic.w	r3, r3, #7
 8002a08:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3304      	adds	r3, #4
 8002a12:	4619      	mov	r1, r3
 8002a14:	4610      	mov	r0, r2
 8002a16:	f000 fa8d 	bl	8002f34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a42:	f023 0303 	bic.w	r3, r3, #3
 8002a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	4313      	orrs	r3, r2
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002a60:	f023 030c 	bic.w	r3, r3, #12
 8002a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	011a      	lsls	r2, r3, #4
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	031b      	lsls	r3, r3, #12
 8002a90:	4313      	orrs	r3, r2
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002a9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002b2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d110      	bne.n	8002b56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d102      	bne.n	8002b40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b3a:	7b7b      	ldrb	r3, [r7, #13]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d001      	beq.n	8002b44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e069      	b.n	8002c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b54:	e031      	b.n	8002bba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d110      	bne.n	8002b7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b5c:	7bbb      	ldrb	r3, [r7, #14]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d102      	bne.n	8002b68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b62:	7b3b      	ldrb	r3, [r7, #12]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d001      	beq.n	8002b6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e055      	b.n	8002c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b7c:	e01d      	b.n	8002bba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d108      	bne.n	8002b96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b84:	7bbb      	ldrb	r3, [r7, #14]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d105      	bne.n	8002b96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002b8a:	7b7b      	ldrb	r3, [r7, #13]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d102      	bne.n	8002b96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002b90:	7b3b      	ldrb	r3, [r7, #12]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d001      	beq.n	8002b9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e03e      	b.n	8002c18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2202      	movs	r2, #2
 8002bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_TIM_Encoder_Start+0xc4>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d008      	beq.n	8002bd8 <HAL_TIM_Encoder_Start+0xd4>
 8002bc6:	e00f      	b.n	8002be8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	2100      	movs	r1, #0
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fc77 	bl	80034c4 <TIM_CCxChannelCmd>
      break;
 8002bd6:	e016      	b.n	8002c06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	2104      	movs	r1, #4
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fc6f 	bl	80034c4 <TIM_CCxChannelCmd>
      break;
 8002be6:	e00e      	b.n	8002c06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2201      	movs	r2, #1
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 fc67 	bl	80034c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	2104      	movs	r1, #4
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fc60 	bl	80034c4 <TIM_CCxChannelCmd>
      break;
 8002c04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0201 	orr.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e0ae      	b.n	8002d9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	f200 809f 	bhi.w	8002d8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002c89 	.word	0x08002c89
 8002c58:	08002d8d 	.word	0x08002d8d
 8002c5c:	08002d8d 	.word	0x08002d8d
 8002c60:	08002d8d 	.word	0x08002d8d
 8002c64:	08002cc9 	.word	0x08002cc9
 8002c68:	08002d8d 	.word	0x08002d8d
 8002c6c:	08002d8d 	.word	0x08002d8d
 8002c70:	08002d8d 	.word	0x08002d8d
 8002c74:	08002d0b 	.word	0x08002d0b
 8002c78:	08002d8d 	.word	0x08002d8d
 8002c7c:	08002d8d 	.word	0x08002d8d
 8002c80:	08002d8d 	.word	0x08002d8d
 8002c84:	08002d4b 	.word	0x08002d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f9d6 	bl	8003040 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0208 	orr.w	r2, r2, #8
 8002ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0204 	bic.w	r2, r2, #4
 8002cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6999      	ldr	r1, [r3, #24]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	619a      	str	r2, [r3, #24]
      break;
 8002cc6:	e064      	b.n	8002d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fa26 	bl	8003120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6999      	ldr	r1, [r3, #24]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	021a      	lsls	r2, r3, #8
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	619a      	str	r2, [r3, #24]
      break;
 8002d08:	e043      	b.n	8002d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fa79 	bl	8003208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0208 	orr.w	r2, r2, #8
 8002d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0204 	bic.w	r2, r2, #4
 8002d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69d9      	ldr	r1, [r3, #28]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	61da      	str	r2, [r3, #28]
      break;
 8002d48:	e023      	b.n	8002d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 facd 	bl	80032f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69d9      	ldr	r1, [r3, #28]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	021a      	lsls	r2, r3, #8
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	61da      	str	r2, [r3, #28]
      break;
 8002d8a:	e002      	b.n	8002d92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0b4      	b.n	8002f2a <HAL_TIM_ConfigClockSource+0x186>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df8:	d03e      	beq.n	8002e78 <HAL_TIM_ConfigClockSource+0xd4>
 8002dfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dfe:	f200 8087 	bhi.w	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e06:	f000 8086 	beq.w	8002f16 <HAL_TIM_ConfigClockSource+0x172>
 8002e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e0e:	d87f      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b70      	cmp	r3, #112	@ 0x70
 8002e12:	d01a      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0xa6>
 8002e14:	2b70      	cmp	r3, #112	@ 0x70
 8002e16:	d87b      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e18:	2b60      	cmp	r3, #96	@ 0x60
 8002e1a:	d050      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x11a>
 8002e1c:	2b60      	cmp	r3, #96	@ 0x60
 8002e1e:	d877      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e20:	2b50      	cmp	r3, #80	@ 0x50
 8002e22:	d03c      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0xfa>
 8002e24:	2b50      	cmp	r3, #80	@ 0x50
 8002e26:	d873      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e28:	2b40      	cmp	r3, #64	@ 0x40
 8002e2a:	d058      	beq.n	8002ede <HAL_TIM_ConfigClockSource+0x13a>
 8002e2c:	2b40      	cmp	r3, #64	@ 0x40
 8002e2e:	d86f      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e30:	2b30      	cmp	r3, #48	@ 0x30
 8002e32:	d064      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e34:	2b30      	cmp	r3, #48	@ 0x30
 8002e36:	d86b      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e38:	2b20      	cmp	r3, #32
 8002e3a:	d060      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d867      	bhi.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d05c      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e44:	2b10      	cmp	r3, #16
 8002e46:	d05a      	beq.n	8002efe <HAL_TIM_ConfigClockSource+0x15a>
 8002e48:	e062      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e5a:	f000 fb14 	bl	8003486 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	609a      	str	r2, [r3, #8]
      break;
 8002e76:	e04f      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e88:	f000 fafd 	bl	8003486 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e9a:	609a      	str	r2, [r3, #8]
      break;
 8002e9c:	e03c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f000 fa74 	bl	8003398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2150      	movs	r1, #80	@ 0x50
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 facb 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8002ebc:	e02c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f000 fa92 	bl	80033f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2160      	movs	r1, #96	@ 0x60
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fabb 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8002edc:	e01c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	461a      	mov	r2, r3
 8002eec:	f000 fa54 	bl	8003398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2140      	movs	r1, #64	@ 0x40
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 faab 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8002efc:	e00c      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f000 faa2 	bl	8003452 <TIM_ITRx_SetConfig>
      break;
 8002f0e:	e003      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e000      	b.n	8002f18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a39      	ldr	r2, [pc, #228]	@ (800302c <TIM_Base_SetConfig+0xf8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d013      	beq.n	8002f74 <TIM_Base_SetConfig+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a38      	ldr	r2, [pc, #224]	@ (8003030 <TIM_Base_SetConfig+0xfc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00f      	beq.n	8002f74 <TIM_Base_SetConfig+0x40>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5a:	d00b      	beq.n	8002f74 <TIM_Base_SetConfig+0x40>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a35      	ldr	r2, [pc, #212]	@ (8003034 <TIM_Base_SetConfig+0x100>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d007      	beq.n	8002f74 <TIM_Base_SetConfig+0x40>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a34      	ldr	r2, [pc, #208]	@ (8003038 <TIM_Base_SetConfig+0x104>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d003      	beq.n	8002f74 <TIM_Base_SetConfig+0x40>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a33      	ldr	r2, [pc, #204]	@ (800303c <TIM_Base_SetConfig+0x108>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d108      	bne.n	8002f86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a28      	ldr	r2, [pc, #160]	@ (800302c <TIM_Base_SetConfig+0xf8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <TIM_Base_SetConfig+0x82>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a27      	ldr	r2, [pc, #156]	@ (8003030 <TIM_Base_SetConfig+0xfc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00f      	beq.n	8002fb6 <TIM_Base_SetConfig+0x82>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9c:	d00b      	beq.n	8002fb6 <TIM_Base_SetConfig+0x82>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a24      	ldr	r2, [pc, #144]	@ (8003034 <TIM_Base_SetConfig+0x100>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d007      	beq.n	8002fb6 <TIM_Base_SetConfig+0x82>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a23      	ldr	r2, [pc, #140]	@ (8003038 <TIM_Base_SetConfig+0x104>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d003      	beq.n	8002fb6 <TIM_Base_SetConfig+0x82>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a22      	ldr	r2, [pc, #136]	@ (800303c <TIM_Base_SetConfig+0x108>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d108      	bne.n	8002fc8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a0f      	ldr	r2, [pc, #60]	@ (800302c <TIM_Base_SetConfig+0xf8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0xc8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8003030 <TIM_Base_SetConfig+0xfc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d103      	bne.n	8003004 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f023 0201 	bic.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	611a      	str	r2, [r3, #16]
  }
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40013400 	.word	0x40013400
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800
 800303c:	40000c00 	.word	0x40000c00

08003040 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f023 0201 	bic.w	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0303 	bic.w	r3, r3, #3
 8003076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 0302 	bic.w	r3, r3, #2
 8003088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a20      	ldr	r2, [pc, #128]	@ (8003118 <TIM_OC1_SetConfig+0xd8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d003      	beq.n	80030a4 <TIM_OC1_SetConfig+0x64>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a1f      	ldr	r2, [pc, #124]	@ (800311c <TIM_OC1_SetConfig+0xdc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d10c      	bne.n	80030be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0308 	bic.w	r3, r3, #8
 80030aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a15      	ldr	r2, [pc, #84]	@ (8003118 <TIM_OC1_SetConfig+0xd8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d003      	beq.n	80030ce <TIM_OC1_SetConfig+0x8e>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a14      	ldr	r2, [pc, #80]	@ (800311c <TIM_OC1_SetConfig+0xdc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d111      	bne.n	80030f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	621a      	str	r2, [r3, #32]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40013400 	.word	0x40013400

08003120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f023 0210 	bic.w	r2, r3, #16
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800314e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0320 	bic.w	r3, r3, #32
 800316a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a21      	ldr	r2, [pc, #132]	@ (8003200 <TIM_OC2_SetConfig+0xe0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_OC2_SetConfig+0x68>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a20      	ldr	r2, [pc, #128]	@ (8003204 <TIM_OC2_SetConfig+0xe4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d10d      	bne.n	80031a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800318e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a16      	ldr	r2, [pc, #88]	@ (8003200 <TIM_OC2_SetConfig+0xe0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_OC2_SetConfig+0x94>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a15      	ldr	r2, [pc, #84]	@ (8003204 <TIM_OC2_SetConfig+0xe4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d113      	bne.n	80031dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	621a      	str	r2, [r3, #32]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40013400 	.word	0x40013400

08003208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a21      	ldr	r2, [pc, #132]	@ (80032e8 <TIM_OC3_SetConfig+0xe0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d003      	beq.n	800326e <TIM_OC3_SetConfig+0x66>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a20      	ldr	r2, [pc, #128]	@ (80032ec <TIM_OC3_SetConfig+0xe4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d10d      	bne.n	800328a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a16      	ldr	r2, [pc, #88]	@ (80032e8 <TIM_OC3_SetConfig+0xe0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d003      	beq.n	800329a <TIM_OC3_SetConfig+0x92>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a15      	ldr	r2, [pc, #84]	@ (80032ec <TIM_OC3_SetConfig+0xe4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d113      	bne.n	80032c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	621a      	str	r2, [r3, #32]
}
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40013400 	.word	0x40013400

080032f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800331e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800333a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	031b      	lsls	r3, r3, #12
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a11      	ldr	r2, [pc, #68]	@ (8003390 <TIM_OC4_SetConfig+0xa0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_OC4_SetConfig+0x68>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a10      	ldr	r2, [pc, #64]	@ (8003394 <TIM_OC4_SetConfig+0xa4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d109      	bne.n	800336c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800335e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	019b      	lsls	r3, r3, #6
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	621a      	str	r2, [r3, #32]
}
 8003386:	bf00      	nop
 8003388:	371c      	adds	r7, #28
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	40012c00 	.word	0x40012c00
 8003394:	40013400 	.word	0x40013400

08003398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 030a 	bic.w	r3, r3, #10
 80033d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f023 0210 	bic.w	r2, r3, #16
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800341e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	031b      	lsls	r3, r3, #12
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003430:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4313      	orrs	r3, r2
 800343a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	bf00      	nop
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003468:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	f043 0307 	orr.w	r3, r3, #7
 8003474:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	609a      	str	r2, [r3, #8]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003486:	b480      	push	{r7}
 8003488:	b087      	sub	sp, #28
 800348a:	af00      	add	r7, sp, #0
 800348c:	60f8      	str	r0, [r7, #12]
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	021a      	lsls	r2, r3, #8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	609a      	str	r2, [r3, #8]
}
 80034ba:	bf00      	nop
 80034bc:	371c      	adds	r7, #28
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	2201      	movs	r2, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1a      	ldr	r2, [r3, #32]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003520:	2302      	movs	r3, #2
 8003522:	e050      	b.n	80035c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a1b      	ldr	r2, [pc, #108]	@ (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a19      	ldr	r2, [pc, #100]	@ (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357a:	d00e      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a15      	ldr	r2, [pc, #84]	@ (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a14      	ldr	r2, [pc, #80]	@ (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a12      	ldr	r2, [pc, #72]	@ (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10c      	bne.n	80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40000c00 	.word	0x40000c00

080035e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e03d      	b.n	800367c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr

08003686 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e042      	b.n	800371e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d106      	bne.n	80036b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7fd fff7 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2224      	movs	r2, #36	@ 0x24
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fa08 	bl	8003ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b08a      	sub	sp, #40	@ 0x28
 800372a:	af02      	add	r7, sp, #8
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	603b      	str	r3, [r7, #0]
 8003732:	4613      	mov	r3, r2
 8003734:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b20      	cmp	r3, #32
 8003744:	d175      	bne.n	8003832 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_UART_Transmit+0x2c>
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e06e      	b.n	8003834 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2221      	movs	r2, #33	@ 0x21
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003764:	f7fe f8ae 	bl	80018c4 <HAL_GetTick>
 8003768:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800377e:	d108      	bne.n	8003792 <HAL_UART_Transmit+0x6c>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	e003      	b.n	800379a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800379a:	e02e      	b.n	80037fa <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2180      	movs	r1, #128	@ 0x80
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f8df 	bl	800396a <UART_WaitOnFlagUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e03a      	b.n	8003834 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10b      	bne.n	80037dc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	3302      	adds	r3, #2
 80037d8:	61bb      	str	r3, [r7, #24]
 80037da:	e007      	b.n	80037ec <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	781a      	ldrb	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3301      	adds	r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1cb      	bne.n	800379c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2200      	movs	r2, #0
 800380c:	2140      	movs	r1, #64	@ 0x40
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f8ab 	bl	800396a <UART_WaitOnFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e006      	b.n	8003834 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003832:	2302      	movs	r3, #2
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3720      	adds	r7, #32
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	@ 0x28
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b20      	cmp	r3, #32
 800385a:	f040 8081 	bne.w	8003960 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_UART_Receive+0x2e>
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e079      	b.n	8003962 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2222      	movs	r2, #34	@ 0x22
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003882:	f7fe f81f 	bl	80018c4 <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	88fa      	ldrh	r2, [r7, #6]
 8003892:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800389c:	d108      	bne.n	80038b0 <HAL_UART_Receive+0x74>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d104      	bne.n	80038b0 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	e003      	b.n	80038b8 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038b8:	e047      	b.n	800394a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2200      	movs	r2, #0
 80038c2:	2120      	movs	r1, #32
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f850 	bl	800396a <UART_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e042      	b.n	8003962 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10c      	bne.n	80038fc <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	3302      	adds	r3, #2
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	e01f      	b.n	800393c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003904:	d007      	beq.n	8003916 <HAL_UART_Receive+0xda>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10a      	bne.n	8003924 <HAL_UART_Receive+0xe8>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	e008      	b.n	8003936 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003930:	b2da      	uxtb	r2, r3
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	3301      	adds	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1b2      	bne.n	80038ba <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	e000      	b.n	8003962 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003960:	2302      	movs	r3, #2
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b086      	sub	sp, #24
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397a:	e03b      	b.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d037      	beq.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003984:	f7fd ff9e 	bl	80018c4 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	6a3a      	ldr	r2, [r7, #32]
 8003990:	429a      	cmp	r2, r3
 8003992:	d302      	bcc.n	800399a <UART_WaitOnFlagUntilTimeout+0x30>
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e03a      	b.n	8003a14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d023      	beq.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b80      	cmp	r3, #128	@ 0x80
 80039b0:	d020      	beq.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b40      	cmp	r3, #64	@ 0x40
 80039b6:	d01d      	beq.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d116      	bne.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f81d 	bl	8003a1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2208      	movs	r2, #8
 80039e6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e00f      	b.n	8003a14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4013      	ands	r3, r2
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d0b4      	beq.n	800397c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b095      	sub	sp, #84	@ 0x54
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2e:	e853 3f00 	ldrex	r3, [r3]
 8003a32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	330c      	adds	r3, #12
 8003a42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a44:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e5      	bne.n	8003a24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3314      	adds	r3, #20
 8003a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	e853 3f00 	ldrex	r3, [r3]
 8003a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3314      	adds	r3, #20
 8003a76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e5      	bne.n	8003a58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d119      	bne.n	8003ac8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	330c      	adds	r3, #12
 8003a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f023 0310 	bic.w	r3, r3, #16
 8003aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	330c      	adds	r3, #12
 8003ab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ab4:	61ba      	str	r2, [r7, #24]
 8003ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6979      	ldr	r1, [r7, #20]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e5      	bne.n	8003a94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ad6:	bf00      	nop
 8003ad8:	3754      	adds	r7, #84	@ 0x54
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003b1a:	f023 030c 	bic.w	r3, r3, #12
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	430b      	orrs	r3, r1
 8003b26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699a      	ldr	r2, [r3, #24]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2c      	ldr	r2, [pc, #176]	@ (8003bf4 <UART_SetConfig+0x114>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d103      	bne.n	8003b50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b48:	f7fe fd4e 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	e002      	b.n	8003b56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b50:	f7fe fd36 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8003b54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009a      	lsls	r2, r3, #2
 8003b60:	441a      	add	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	4a22      	ldr	r2, [pc, #136]	@ (8003bf8 <UART_SetConfig+0x118>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	0119      	lsls	r1, r3, #4
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009a      	lsls	r2, r3, #2
 8003b80:	441a      	add	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf8 <UART_SetConfig+0x118>)
 8003b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2064      	movs	r0, #100	@ 0x64
 8003b96:	fb00 f303 	mul.w	r3, r0, r3
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	3332      	adds	r3, #50	@ 0x32
 8003ba0:	4a15      	ldr	r2, [pc, #84]	@ (8003bf8 <UART_SetConfig+0x118>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bac:	4419      	add	r1, r3
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009a      	lsls	r2, r3, #2
 8003bb8:	441a      	add	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <UART_SetConfig+0x118>)
 8003bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2064      	movs	r0, #100	@ 0x64
 8003bce:	fb00 f303 	mul.w	r3, r0, r3
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	3332      	adds	r3, #50	@ 0x32
 8003bd8:	4a07      	ldr	r2, [pc, #28]	@ (8003bf8 <UART_SetConfig+0x118>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	f003 020f 	and.w	r2, r3, #15
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	440a      	add	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40013800 	.word	0x40013800
 8003bf8:	51eb851f 	.word	0x51eb851f

08003bfc <memset>:
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4402      	add	r2, r0
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d100      	bne.n	8003c06 <memset+0xa>
 8003c04:	4770      	bx	lr
 8003c06:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0a:	e7f9      	b.n	8003c00 <memset+0x4>

08003c0c <__libc_init_array>:
 8003c0c:	b570      	push	{r4, r5, r6, lr}
 8003c0e:	2600      	movs	r6, #0
 8003c10:	4d0c      	ldr	r5, [pc, #48]	@ (8003c44 <__libc_init_array+0x38>)
 8003c12:	4c0d      	ldr	r4, [pc, #52]	@ (8003c48 <__libc_init_array+0x3c>)
 8003c14:	1b64      	subs	r4, r4, r5
 8003c16:	10a4      	asrs	r4, r4, #2
 8003c18:	42a6      	cmp	r6, r4
 8003c1a:	d109      	bne.n	8003c30 <__libc_init_array+0x24>
 8003c1c:	f000 f81a 	bl	8003c54 <_init>
 8003c20:	2600      	movs	r6, #0
 8003c22:	4d0a      	ldr	r5, [pc, #40]	@ (8003c4c <__libc_init_array+0x40>)
 8003c24:	4c0a      	ldr	r4, [pc, #40]	@ (8003c50 <__libc_init_array+0x44>)
 8003c26:	1b64      	subs	r4, r4, r5
 8003c28:	10a4      	asrs	r4, r4, #2
 8003c2a:	42a6      	cmp	r6, r4
 8003c2c:	d105      	bne.n	8003c3a <__libc_init_array+0x2e>
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c34:	4798      	blx	r3
 8003c36:	3601      	adds	r6, #1
 8003c38:	e7ee      	b.n	8003c18 <__libc_init_array+0xc>
 8003c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3e:	4798      	blx	r3
 8003c40:	3601      	adds	r6, #1
 8003c42:	e7f2      	b.n	8003c2a <__libc_init_array+0x1e>
 8003c44:	08003ca8 	.word	0x08003ca8
 8003c48:	08003ca8 	.word	0x08003ca8
 8003c4c:	08003ca8 	.word	0x08003ca8
 8003c50:	08003cac 	.word	0x08003cac

08003c54 <_init>:
 8003c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c56:	bf00      	nop
 8003c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5a:	bc08      	pop	{r3}
 8003c5c:	469e      	mov	lr, r3
 8003c5e:	4770      	bx	lr

08003c60 <_fini>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	bf00      	nop
 8003c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c66:	bc08      	pop	{r3}
 8003c68:	469e      	mov	lr, r3
 8003c6a:	4770      	bx	lr
